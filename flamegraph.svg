<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="822" onload="init(evt)" viewBox="0 0 1200 822" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="822" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="805.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="805.00"> </text><svg id="frames" x="10" width="1180" total_samples="663991958"><g><title>aoc24::days::day1::day_1_work::{{closure}} (6,018,054 samples, 0.91%)</title><rect x="0.0000%" y="405" width="0.9063%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="6018054"/><text x="0.2500%" y="415.50"></text></g><g><title>core::num::&lt;impl usize&gt;::abs_diff (6,018,054 samples, 0.91%)</title><rect x="0.0000%" y="389" width="0.9063%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="6018054"/><text x="0.2500%" y="399.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1,003,009 samples, 0.15%)</title><rect x="0.9063%" y="405" width="0.1511%" height="15" fill="rgb(221,193,54)" fg:x="6018054" fg:w="1003009"/><text x="1.1563%" y="415.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1,003,009 samples, 0.15%)</title><rect x="0.9063%" y="389" width="0.1511%" height="15" fill="rgb(248,212,6)" fg:x="6018054" fg:w="1003009"/><text x="1.1563%" y="399.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (1,003,009 samples, 0.15%)</title><rect x="0.9063%" y="373" width="0.1511%" height="15" fill="rgb(208,68,35)" fg:x="6018054" fg:w="1003009"/><text x="1.1563%" y="383.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (1,003,009 samples, 0.15%)</title><rect x="0.9063%" y="357" width="0.1511%" height="15" fill="rgb(232,128,0)" fg:x="6018054" fg:w="1003009"/><text x="1.1563%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8,024,072 samples, 1.21%)</title><rect x="0.0000%" y="437" width="1.2085%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="8024072"/><text x="0.2500%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::fold (8,024,072 samples, 1.21%)</title><rect x="0.0000%" y="421" width="1.2085%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="8024072"/><text x="0.2500%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::zip::Zip&lt;alloc::vec::into_iter::IntoIter&lt;usize&gt;,alloc::vec::into_iter::IntoIter&lt;usize&gt;&gt;&gt; (1,003,009 samples, 0.15%)</title><rect x="1.0574%" y="405" width="0.1511%" height="15" fill="rgb(218,30,26)" fg:x="7021063" fg:w="1003009"/><text x="1.3074%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;usize&gt;&gt; (1,003,009 samples, 0.15%)</title><rect x="1.0574%" y="389" width="0.1511%" height="15" fill="rgb(220,122,19)" fg:x="7021063" fg:w="1003009"/><text x="1.3074%" y="399.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,003,009 samples, 0.15%)</title><rect x="1.0574%" y="373" width="0.1511%" height="15" fill="rgb(250,228,42)" fg:x="7021063" fg:w="1003009"/><text x="1.3074%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;usize,alloc::alloc::Global&gt;&gt; (1,003,009 samples, 0.15%)</title><rect x="1.0574%" y="357" width="0.1511%" height="15" fill="rgb(240,193,28)" fg:x="7021063" fg:w="1003009"/><text x="1.3074%" y="367.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,003,009 samples, 0.15%)</title><rect x="1.0574%" y="341" width="0.1511%" height="15" fill="rgb(216,20,37)" fg:x="7021063" fg:w="1003009"/><text x="1.3074%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (1,003,009 samples, 0.15%)</title><rect x="1.0574%" y="325" width="0.1511%" height="15" fill="rgb(206,188,39)" fg:x="7021063" fg:w="1003009"/><text x="1.3074%" y="335.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,003,009 samples, 0.15%)</title><rect x="1.0574%" y="309" width="0.1511%" height="15" fill="rgb(217,207,13)" fg:x="7021063" fg:w="1003009"/><text x="1.3074%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1,003,009 samples, 0.15%)</title><rect x="1.0574%" y="293" width="0.1511%" height="15" fill="rgb(231,73,38)" fg:x="7021063" fg:w="1003009"/><text x="1.3074%" y="303.50"></text></g><g><title>alloc::alloc::dealloc (1,003,009 samples, 0.15%)</title><rect x="1.0574%" y="277" width="0.1511%" height="15" fill="rgb(225,20,46)" fg:x="7021063" fg:w="1003009"/><text x="1.3074%" y="287.50"></text></g><g><title>free (1,003,009 samples, 0.15%)</title><rect x="1.0574%" y="261" width="0.1511%" height="15" fill="rgb(210,31,41)" fg:x="7021063" fg:w="1003009"/><text x="1.3074%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (9,027,081 samples, 1.36%)</title><rect x="5.4381%" y="213" width="1.3595%" height="15" fill="rgb(221,200,47)" fg:x="36108324" fg:w="9027081"/><text x="5.6881%" y="223.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (9,027,081 samples, 1.36%)</title><rect x="5.4381%" y="197" width="1.3595%" height="15" fill="rgb(226,26,5)" fg:x="36108324" fg:w="9027081"/><text x="5.6881%" y="207.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (9,027,081 samples, 1.36%)</title><rect x="5.4381%" y="181" width="1.3595%" height="15" fill="rgb(249,33,26)" fg:x="36108324" fg:w="9027081"/><text x="5.6881%" y="191.50"></text></g><g><title>[libc.so.6] (9,027,081 samples, 1.36%)</title><rect x="5.4381%" y="165" width="1.3595%" height="15" fill="rgb(235,183,28)" fg:x="36108324" fg:w="9027081"/><text x="5.6881%" y="175.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (2,006,018 samples, 0.30%)</title><rect x="6.7976%" y="213" width="0.3021%" height="15" fill="rgb(221,5,38)" fg:x="45135405" fg:w="2006018"/><text x="7.0476%" y="223.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (2,006,018 samples, 0.30%)</title><rect x="6.7976%" y="197" width="0.3021%" height="15" fill="rgb(247,18,42)" fg:x="45135405" fg:w="2006018"/><text x="7.0476%" y="207.50"></text></g><g><title>core::slice::index::get_offset_len_noubcheck (2,006,018 samples, 0.30%)</title><rect x="6.7976%" y="181" width="0.3021%" height="15" fill="rgb(241,131,45)" fg:x="45135405" fg:w="2006018"/><text x="7.0476%" y="191.50"></text></g><g><title>core::slice::index::get_noubcheck (2,006,018 samples, 0.30%)</title><rect x="6.7976%" y="165" width="0.3021%" height="15" fill="rgb(249,31,29)" fg:x="45135405" fg:w="2006018"/><text x="7.0476%" y="175.50"></text></g><g><title>core::num::&lt;impl usize&gt;::repeat_u8 (9,027,081 samples, 1.36%)</title><rect x="9.3656%" y="181" width="1.3595%" height="15" fill="rgb(225,111,53)" fg:x="62186558" fg:w="9027081"/><text x="9.6156%" y="191.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (4,012,036 samples, 0.60%)</title><rect x="10.7251%" y="181" width="0.6042%" height="15" fill="rgb(238,160,17)" fg:x="71213639" fg:w="4012036"/><text x="10.9751%" y="191.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (85,255,765 samples, 12.84%)</title><rect x="1.2085%" y="261" width="12.8399%" height="15" fill="rgb(214,148,48)" fg:x="8024072" fg:w="85255765"/><text x="1.4585%" y="271.50">&lt;core::str::iter::S..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (85,255,765 samples, 12.84%)</title><rect x="1.2085%" y="245" width="12.8399%" height="15" fill="rgb(232,36,49)" fg:x="8024072" fg:w="85255765"/><text x="1.4585%" y="255.50">core::str::iter::Sp..</text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (82,246,738 samples, 12.39%)</title><rect x="1.6616%" y="229" width="12.3867%" height="15" fill="rgb(209,103,24)" fg:x="11033099" fg:w="82246738"/><text x="1.9116%" y="239.50">&lt;core::str::patter..</text></g><g><title>core::slice::memchr::memchr (46,138,414 samples, 6.95%)</title><rect x="7.0997%" y="213" width="6.9486%" height="15" fill="rgb(229,88,8)" fg:x="47141423" fg:w="46138414"/><text x="7.3497%" y="223.50">core::sli..</text></g><g><title>core::slice::memchr::memchr_aligned (46,138,414 samples, 6.95%)</title><rect x="7.0997%" y="197" width="6.9486%" height="15" fill="rgb(213,181,19)" fg:x="47141423" fg:w="46138414"/><text x="7.3497%" y="207.50">core::sli..</text></g><g><title>core::slice::memchr::memchr_naive (18,054,162 samples, 2.72%)</title><rect x="11.3293%" y="181" width="2.7190%" height="15" fill="rgb(254,191,54)" fg:x="75225675" fg:w="18054162"/><text x="11.5793%" y="191.50">co..</text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (103,309,927 samples, 15.56%)</title><rect x="1.2085%" y="293" width="15.5589%" height="15" fill="rgb(241,83,37)" fg:x="8024072" fg:w="103309927"/><text x="1.4585%" y="303.50">&lt;core::str::iter::Lines ..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (103,309,927 samples, 15.56%)</title><rect x="1.2085%" y="277" width="15.5589%" height="15" fill="rgb(233,36,39)" fg:x="8024072" fg:w="103309927"/><text x="1.4585%" y="287.50">&lt;core::iter::adapters::m..</text></g><g><title>core::option::Option&lt;T&gt;::map (18,054,162 samples, 2.72%)</title><rect x="14.0483%" y="261" width="2.7190%" height="15" fill="rgb(226,3,54)" fg:x="93279837" fg:w="18054162"/><text x="14.2983%" y="271.50">co..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (18,054,162 samples, 2.72%)</title><rect x="14.0483%" y="245" width="2.7190%" height="15" fill="rgb(245,192,40)" fg:x="93279837" fg:w="18054162"/><text x="14.2983%" y="255.50">co..</text></g><g><title>&lt;core::str::LinesMap as core::ops::function::FnMut&lt;(&amp;str,)&gt;&gt;::call_mut (18,054,162 samples, 2.72%)</title><rect x="14.0483%" y="229" width="2.7190%" height="15" fill="rgb(238,167,29)" fg:x="93279837" fg:w="18054162"/><text x="14.2983%" y="239.50">&lt;c..</text></g><g><title>&lt;core::str::LinesMap as core::ops::function::Fn&lt;(&amp;str,)&gt;&gt;::call (18,054,162 samples, 2.72%)</title><rect x="14.0483%" y="213" width="2.7190%" height="15" fill="rgb(232,182,51)" fg:x="93279837" fg:w="18054162"/><text x="14.2983%" y="223.50">&lt;c..</text></g><g><title>core::str::&lt;impl str&gt;::strip_suffix (1,003,009 samples, 0.15%)</title><rect x="16.6163%" y="197" width="0.1511%" height="15" fill="rgb(231,60,39)" fg:x="110330990" fg:w="1003009"/><text x="16.8663%" y="207.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::strip_suffix_of (1,003,009 samples, 0.15%)</title><rect x="16.6163%" y="181" width="0.1511%" height="15" fill="rgb(208,69,12)" fg:x="110330990" fg:w="1003009"/><text x="16.8663%" y="191.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::strip_suffix_of (1,003,009 samples, 0.15%)</title><rect x="16.6163%" y="165" width="0.1511%" height="15" fill="rgb(235,93,37)" fg:x="110330990" fg:w="1003009"/><text x="16.8663%" y="175.50"></text></g><g><title>&lt;F as core::str::pattern::MultiCharEq&gt;::matches (24,072,216 samples, 3.63%)</title><rect x="23.7160%" y="101" width="3.6254%" height="15" fill="rgb(213,116,39)" fg:x="157472413" fg:w="24072216"/><text x="23.9660%" y="111.50">&lt;F a..</text></g><g><title>&lt;core::str::IsWhitespace as core::ops::function::FnMut&lt;(char,)&gt;&gt;::call_mut (24,072,216 samples, 3.63%)</title><rect x="23.7160%" y="85" width="3.6254%" height="15" fill="rgb(222,207,29)" fg:x="157472413" fg:w="24072216"/><text x="23.9660%" y="95.50">&lt;cor..</text></g><g><title>&lt;core::str::IsWhitespace as core::ops::function::Fn&lt;(char,)&gt;&gt;::call (24,072,216 samples, 3.63%)</title><rect x="23.7160%" y="69" width="3.6254%" height="15" fill="rgb(206,96,30)" fg:x="157472413" fg:w="24072216"/><text x="23.9660%" y="79.50">&lt;cor..</text></g><g><title>core::char::methods::&lt;impl char&gt;::is_whitespace (24,072,216 samples, 3.63%)</title><rect x="23.7160%" y="53" width="3.6254%" height="15" fill="rgb(218,138,4)" fg:x="157472413" fg:w="24072216"/><text x="23.9660%" y="63.50">core..</text></g><g><title>&lt;core::str::pattern::CharPredicateSearcher&lt;F&gt; as core::str::pattern::Searcher&gt;::next_match (66,198,594 samples, 9.97%)</title><rect x="23.7160%" y="149" width="9.9698%" height="15" fill="rgb(250,191,14)" fg:x="157472413" fg:w="66198594"/><text x="23.9660%" y="159.50">&lt;core::str::pa..</text></g><g><title>core::str::pattern::Searcher::next_match (66,198,594 samples, 9.97%)</title><rect x="23.7160%" y="133" width="9.9698%" height="15" fill="rgb(239,60,40)" fg:x="157472413" fg:w="66198594"/><text x="23.9660%" y="143.50">core::str::pat..</text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::Searcher&gt;::next (66,198,594 samples, 9.97%)</title><rect x="23.7160%" y="117" width="9.9698%" height="15" fill="rgb(206,27,48)" fg:x="157472413" fg:w="66198594"/><text x="23.9660%" y="127.50">&lt;core::str::pa..</text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (42,126,378 samples, 6.34%)</title><rect x="27.3414%" y="101" width="6.3444%" height="15" fill="rgb(225,35,8)" fg:x="181544629" fg:w="42126378"/><text x="27.5914%" y="111.50">&lt;core::s..</text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (37,111,333 samples, 5.59%)</title><rect x="28.0967%" y="85" width="5.5891%" height="15" fill="rgb(250,213,24)" fg:x="186559674" fg:w="37111333"/><text x="28.3467%" y="95.50">&lt;core::..</text></g><g><title>core::str::validations::next_code_point (37,111,333 samples, 5.59%)</title><rect x="28.0967%" y="69" width="5.5891%" height="15" fill="rgb(247,123,22)" fg:x="186559674" fg:w="37111333"/><text x="28.3467%" y="79.50">core::s..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (6,018,054 samples, 0.91%)</title><rect x="32.7795%" y="53" width="0.9063%" height="15" fill="rgb(231,138,38)" fg:x="217652953" fg:w="6018054"/><text x="33.0295%" y="63.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (6,018,054 samples, 0.91%)</title><rect x="32.7795%" y="37" width="0.9063%" height="15" fill="rgb(231,145,46)" fg:x="217652953" fg:w="6018054"/><text x="33.0295%" y="47.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (79,237,711 samples, 11.93%)</title><rect x="22.3565%" y="181" width="11.9335%" height="15" fill="rgb(251,118,11)" fg:x="148445332" fg:w="79237711"/><text x="22.6065%" y="191.50">&lt;core::str::iter::..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (79,237,711 samples, 11.93%)</title><rect x="22.3565%" y="165" width="11.9335%" height="15" fill="rgb(217,147,25)" fg:x="148445332" fg:w="79237711"/><text x="22.6065%" y="175.50">core::str::iter::S..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::get_end (4,012,036 samples, 0.60%)</title><rect x="33.6858%" y="149" width="0.6042%" height="15" fill="rgb(247,81,37)" fg:x="223671007" fg:w="4012036"/><text x="33.9358%" y="159.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (113,340,017 samples, 17.07%)</title><rect x="17.5227%" y="197" width="17.0695%" height="15" fill="rgb(209,12,38)" fg:x="116349044" fg:w="113340017"/><text x="17.7727%" y="207.50">core::iter::traits::iterat..</text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (2,006,018 samples, 0.30%)</title><rect x="34.2900%" y="181" width="0.3021%" height="15" fill="rgb(227,1,9)" fg:x="227683043" fg:w="2006018"/><text x="34.5400%" y="191.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (2,006,018 samples, 0.30%)</title><rect x="34.2900%" y="165" width="0.3021%" height="15" fill="rgb(248,47,43)" fg:x="227683043" fg:w="2006018"/><text x="34.5400%" y="175.50"></text></g><g><title>&lt;core::str::IsNotEmpty as core::ops::function::FnMut&lt;(&amp;&amp;str,)&gt;&gt;::call_mut (2,006,018 samples, 0.30%)</title><rect x="34.2900%" y="149" width="0.3021%" height="15" fill="rgb(221,10,30)" fg:x="227683043" fg:w="2006018"/><text x="34.5400%" y="159.50"></text></g><g><title>&lt;core::str::IsNotEmpty as core::ops::function::Fn&lt;(&amp;&amp;str,)&gt;&gt;::call (2,006,018 samples, 0.30%)</title><rect x="34.2900%" y="133" width="0.3021%" height="15" fill="rgb(210,229,1)" fg:x="227683043" fg:w="2006018"/><text x="34.5400%" y="143.50"></text></g><g><title>core::str::&lt;impl str&gt;::is_empty (2,006,018 samples, 0.30%)</title><rect x="34.2900%" y="117" width="0.3021%" height="15" fill="rgb(222,148,37)" fg:x="227683043" fg:w="2006018"/><text x="34.5400%" y="127.50"></text></g><g><title>&lt;core::str::iter::SplitWhitespace as core::iter::traits::iterator::Iterator&gt;::next (115,346,035 samples, 17.37%)</title><rect x="17.5227%" y="245" width="17.3716%" height="15" fill="rgb(234,67,33)" fg:x="116349044" fg:w="115346035"/><text x="17.7727%" y="255.50">&lt;core::str::iter::SplitWhit..</text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (115,346,035 samples, 17.37%)</title><rect x="17.5227%" y="229" width="17.3716%" height="15" fill="rgb(247,98,35)" fg:x="116349044" fg:w="115346035"/><text x="17.7727%" y="239.50">&lt;core::iter::adapters::filt..</text></g><g><title>core::iter::traits::iterator::Iterator::find (115,346,035 samples, 17.37%)</title><rect x="17.5227%" y="213" width="17.3716%" height="15" fill="rgb(247,138,52)" fg:x="116349044" fg:w="115346035"/><text x="17.7727%" y="223.50">core::iter::traits::iterato..</text></g><g><title>core::ops::control_flow::ControlFlow&lt;B,C&gt;::break_value (2,006,018 samples, 0.30%)</title><rect x="34.5921%" y="197" width="0.3021%" height="15" fill="rgb(213,79,30)" fg:x="229689061" fg:w="2006018"/><text x="34.8421%" y="207.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (4,012,036 samples, 0.60%)</title><rect x="34.8943%" y="245" width="0.6042%" height="15" fill="rgb(246,177,23)" fg:x="231695079" fg:w="4012036"/><text x="35.1443%" y="255.50"></text></g><g><title>aoc24::days::day1::unpack_inp::{{closure}} (221,664,989 samples, 33.38%)</title><rect x="17.5227%" y="261" width="33.3837%" height="15" fill="rgb(230,62,27)" fg:x="116349044" fg:w="221664989"/><text x="17.7727%" y="271.50">aoc24::days::day1::unpack_inp::{{closure}}</text></g><g><title>core::str::&lt;impl str&gt;::parse (102,306,918 samples, 15.41%)</title><rect x="35.4985%" y="245" width="15.4079%" height="15" fill="rgb(216,154,8)" fg:x="235707115" fg:w="102306918"/><text x="35.7485%" y="255.50">core::str::&lt;impl str&gt;::p..</text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for usize&gt;::from_str (99,297,891 samples, 14.95%)</title><rect x="35.9517%" y="229" width="14.9547%" height="15" fill="rgb(244,35,45)" fg:x="238716142" fg:w="99297891"/><text x="36.2017%" y="239.50">core::num::&lt;impl core::..</text></g><g><title>core::num::&lt;impl usize&gt;::from_str_radix (96,288,864 samples, 14.50%)</title><rect x="36.4048%" y="213" width="14.5015%" height="15" fill="rgb(251,115,12)" fg:x="241725169" fg:w="96288864"/><text x="36.6548%" y="223.50">core::num::&lt;impl usize..</text></g><g><title>core::num::&lt;impl u64&gt;::from_str_radix (95,285,855 samples, 14.35%)</title><rect x="36.5559%" y="197" width="14.3505%" height="15" fill="rgb(240,54,50)" fg:x="242728178" fg:w="95285855"/><text x="36.8059%" y="207.50">core::num::&lt;impl u64&gt;:..</text></g><g><title>core::char::methods::&lt;impl char&gt;::to_digit (6,018,054 samples, 0.91%)</title><rect x="50.0000%" y="181" width="0.9063%" height="15" fill="rgb(233,84,52)" fg:x="331995979" fg:w="6018054"/><text x="50.2500%" y="191.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_sub (1,003,009 samples, 0.15%)</title><rect x="50.7553%" y="165" width="0.1511%" height="15" fill="rgb(207,117,47)" fg:x="337011024" fg:w="1003009"/><text x="51.0053%" y="175.50"></text></g><g><title>__rdl_realloc (1,003,009 samples, 0.15%)</title><rect x="51.2085%" y="117" width="0.1511%" height="15" fill="rgb(249,43,39)" fg:x="340020051" fg:w="1003009"/><text x="51.4585%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (11,033,099 samples, 1.66%)</title><rect x="51.2085%" y="213" width="1.6616%" height="15" fill="rgb(209,38,44)" fg:x="340020051" fg:w="11033099"/><text x="51.4585%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (11,033,099 samples, 1.66%)</title><rect x="51.2085%" y="197" width="1.6616%" height="15" fill="rgb(236,212,23)" fg:x="340020051" fg:w="11033099"/><text x="51.4585%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (11,033,099 samples, 1.66%)</title><rect x="51.2085%" y="181" width="1.6616%" height="15" fill="rgb(242,79,21)" fg:x="340020051" fg:w="11033099"/><text x="51.4585%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (11,033,099 samples, 1.66%)</title><rect x="51.2085%" y="165" width="1.6616%" height="15" fill="rgb(211,96,35)" fg:x="340020051" fg:w="11033099"/><text x="51.4585%" y="175.50"></text></g><g><title>alloc::alloc::Global::grow_impl (11,033,099 samples, 1.66%)</title><rect x="51.2085%" y="149" width="1.6616%" height="15" fill="rgb(253,215,40)" fg:x="340020051" fg:w="11033099"/><text x="51.4585%" y="159.50"></text></g><g><title>alloc::alloc::realloc (11,033,099 samples, 1.66%)</title><rect x="51.2085%" y="133" width="1.6616%" height="15" fill="rgb(211,81,21)" fg:x="340020051" fg:w="11033099"/><text x="51.4585%" y="143.50"></text></g><g><title>realloc (10,030,090 samples, 1.51%)</title><rect x="51.3595%" y="117" width="1.5106%" height="15" fill="rgb(208,190,38)" fg:x="341023060" fg:w="10030090"/><text x="51.6095%" y="127.50"></text></g><g><title>[libc.so.6] (8,024,072 samples, 1.21%)</title><rect x="51.6616%" y="101" width="1.2085%" height="15" fill="rgb(235,213,38)" fg:x="343029078" fg:w="8024072"/><text x="51.9116%" y="111.50"></text></g><g><title>[libc.so.6] (7,021,063 samples, 1.06%)</title><rect x="51.8127%" y="85" width="1.0574%" height="15" fill="rgb(237,122,38)" fg:x="344032087" fg:w="7021063"/><text x="52.0627%" y="95.50"></text></g><g><title>[libc.so.6] (4,012,036 samples, 0.60%)</title><rect x="52.2659%" y="69" width="0.6042%" height="15" fill="rgb(244,218,35)" fg:x="347041114" fg:w="4012036"/><text x="52.5159%" y="79.50"></text></g><g><title>aoc24::days::day1::unpack_inp (345,035,096 samples, 51.96%)</title><rect x="1.2085%" y="437" width="51.9637%" height="15" fill="rgb(240,68,47)" fg:x="8024072" fg:w="345035096"/><text x="1.4585%" y="447.50">aoc24::days::day1::unpack_inp</text></g><g><title>core::iter::traits::iterator::Iterator::collect (345,035,096 samples, 51.96%)</title><rect x="1.2085%" y="421" width="51.9637%" height="15" fill="rgb(210,16,53)" fg:x="8024072" fg:w="345035096"/><text x="1.4585%" y="431.50">core::iter::traits::iterator::Iterator::collect</text></g><g><title>&lt;(A,B) as core::iter::traits::collect::FromIterator&lt;(AE,BE)&gt;&gt;::from_iter (345,035,096 samples, 51.96%)</title><rect x="1.2085%" y="405" width="51.9637%" height="15" fill="rgb(235,124,12)" fg:x="8024072" fg:w="345035096"/><text x="1.4585%" y="415.50">&lt;(A,B) as core::iter::traits::collect::FromIterator&lt;(AE,BE)&gt;&gt;::from_iter</text></g><g><title>&lt;(ExtendA,ExtendB) as core::iter::traits::collect::Extend&lt;(A,B)&gt;&gt;::extend (345,035,096 samples, 51.96%)</title><rect x="1.2085%" y="389" width="51.9637%" height="15" fill="rgb(224,169,11)" fg:x="8024072" fg:w="345035096"/><text x="1.4585%" y="399.50">&lt;(ExtendA,ExtendB) as core::iter::traits::collect::Extend&lt;(A,B)&gt;&gt;::extend</text></g><g><title>&lt;Iter as core::iter::traits::collect::SpecTupleExtend&lt;ExtendA,ExtendB&gt;&gt;::extend (345,035,096 samples, 51.96%)</title><rect x="1.2085%" y="373" width="51.9637%" height="15" fill="rgb(250,166,2)" fg:x="8024072" fg:w="345035096"/><text x="1.4585%" y="383.50">&lt;Iter as core::iter::traits::collect::SpecTupleExtend&lt;ExtendA,ExtendB&gt;&gt;::extend</text></g><g><title>core::iter::traits::collect::default_extend_tuple (345,035,096 samples, 51.96%)</title><rect x="1.2085%" y="357" width="51.9637%" height="15" fill="rgb(242,216,29)" fg:x="8024072" fg:w="345035096"/><text x="1.4585%" y="367.50">core::iter::traits::collect::default_extend_tuple</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (345,035,096 samples, 51.96%)</title><rect x="1.2085%" y="341" width="51.9637%" height="15" fill="rgb(230,116,27)" fg:x="8024072" fg:w="345035096"/><text x="1.4585%" y="351.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (345,035,096 samples, 51.96%)</title><rect x="1.2085%" y="325" width="51.9637%" height="15" fill="rgb(228,99,48)" fg:x="8024072" fg:w="345035096"/><text x="1.4585%" y="335.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>core::iter::traits::iterator::Iterator::fold (345,035,096 samples, 51.96%)</title><rect x="1.2085%" y="309" width="51.9637%" height="15" fill="rgb(253,11,6)" fg:x="8024072" fg:w="345035096"/><text x="1.4585%" y="319.50">core::iter::traits::iterator::Iterator::fold</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (241,725,169 samples, 36.40%)</title><rect x="16.7674%" y="293" width="36.4048%" height="15" fill="rgb(247,143,39)" fg:x="111333999" fg:w="241725169"/><text x="17.0174%" y="303.50">core::iter::adapters::map::map_fold::{{closure}}</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (241,725,169 samples, 36.40%)</title><rect x="16.7674%" y="277" width="36.4048%" height="15" fill="rgb(236,97,10)" fg:x="111333999" fg:w="241725169"/><text x="17.0174%" y="287.50">core::iter::adapters::map::map_fold::{{closure}}</text></g><g><title>core::iter::traits::collect::default_extend_tuple::extend::{{closure}} (15,045,135 samples, 2.27%)</title><rect x="50.9063%" y="261" width="2.2659%" height="15" fill="rgb(233,208,19)" fg:x="338014033" fg:w="15045135"/><text x="51.1563%" y="271.50">c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend_one (15,045,135 samples, 2.27%)</title><rect x="50.9063%" y="245" width="2.2659%" height="15" fill="rgb(216,164,2)" fg:x="338014033" fg:w="15045135"/><text x="51.1563%" y="255.50">&lt;..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (15,045,135 samples, 2.27%)</title><rect x="50.9063%" y="229" width="2.2659%" height="15" fill="rgb(220,129,5)" fg:x="338014033" fg:w="15045135"/><text x="51.1563%" y="239.50">a..</text></g><g><title>core::ptr::write (2,006,018 samples, 0.30%)</title><rect x="52.8701%" y="213" width="0.3021%" height="15" fill="rgb(242,17,10)" fg:x="351053150" fg:w="2006018"/><text x="53.1201%" y="223.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (1,003,009 samples, 0.15%)</title><rect x="53.1722%" y="405" width="0.1511%" height="15" fill="rgb(242,107,0)" fg:x="353059168" fg:w="1003009"/><text x="53.4222%" y="415.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort13_optimal (1,003,009 samples, 0.15%)</title><rect x="53.1722%" y="389" width="0.1511%" height="15" fill="rgb(251,28,31)" fg:x="353059168" fg:w="1003009"/><text x="53.4222%" y="399.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (1,003,009 samples, 0.15%)</title><rect x="53.1722%" y="373" width="0.1511%" height="15" fill="rgb(233,223,10)" fg:x="353059168" fg:w="1003009"/><text x="53.4222%" y="383.50"></text></g><g><title>core::intrinsics::copy (1,003,009 samples, 0.15%)</title><rect x="53.1722%" y="357" width="0.1511%" height="15" fill="rgb(215,21,27)" fg:x="353059168" fg:w="1003009"/><text x="53.4222%" y="367.50"></text></g><g><title>core::slice::sort::shared::pivot::choose_pivot (2,006,018 samples, 0.30%)</title><rect x="53.3233%" y="389" width="0.3021%" height="15" fill="rgb(232,23,21)" fg:x="354062177" fg:w="2006018"/><text x="53.5733%" y="399.50"></text></g><g><title>core::slice::sort::shared::pivot::median3_rec (2,006,018 samples, 0.30%)</title><rect x="53.3233%" y="373" width="0.3021%" height="15" fill="rgb(244,5,23)" fg:x="354062177" fg:w="2006018"/><text x="53.5733%" y="383.50"></text></g><g><title>core::slice::sort::shared::pivot::median3_rec (2,006,018 samples, 0.30%)</title><rect x="53.3233%" y="357" width="0.3021%" height="15" fill="rgb(226,81,46)" fg:x="354062177" fg:w="2006018"/><text x="53.5733%" y="367.50"></text></g><g><title>core::slice::sort::shared::pivot::median3 (1,003,009 samples, 0.15%)</title><rect x="53.4743%" y="341" width="0.1511%" height="15" fill="rgb(247,70,30)" fg:x="355065186" fg:w="1003009"/><text x="53.7243%" y="351.50"></text></g><g><title>core::ops::function::FnMut::call_mut (2,006,018 samples, 0.30%)</title><rect x="53.6254%" y="341" width="0.3021%" height="15" fill="rgb(212,68,19)" fg:x="356068195" fg:w="2006018"/><text x="53.8754%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (2,006,018 samples, 0.30%)</title><rect x="53.6254%" y="325" width="0.3021%" height="15" fill="rgb(240,187,13)" fg:x="356068195" fg:w="2006018"/><text x="53.8754%" y="335.50"></text></g><g><title>core::slice::sort::shared::smallsort::bidirectional_merge (3,009,027 samples, 0.45%)</title><rect x="53.6254%" y="373" width="0.4532%" height="15" fill="rgb(223,113,26)" fg:x="356068195" fg:w="3009027"/><text x="53.8754%" y="383.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_down (3,009,027 samples, 0.45%)</title><rect x="53.6254%" y="357" width="0.4532%" height="15" fill="rgb(206,192,2)" fg:x="356068195" fg:w="3009027"/><text x="53.8754%" y="367.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::wrapping_sub (1,003,009 samples, 0.15%)</title><rect x="53.9275%" y="341" width="0.1511%" height="15" fill="rgb(241,108,4)" fg:x="358074213" fg:w="1003009"/><text x="54.1775%" y="351.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::wrapping_offset (1,003,009 samples, 0.15%)</title><rect x="53.9275%" y="325" width="0.1511%" height="15" fill="rgb(247,173,49)" fg:x="358074213" fg:w="1003009"/><text x="54.1775%" y="335.50"></text></g><g><title>core::slice::sort::shared::smallsort::insertion_sort_shift_left (1,003,009 samples, 0.15%)</title><rect x="54.0785%" y="373" width="0.1511%" height="15" fill="rgb(224,114,35)" fg:x="359077222" fg:w="1003009"/><text x="54.3285%" y="383.50"></text></g><g><title>core::slice::sort::shared::smallsort::insert_tail (1,003,009 samples, 0.15%)</title><rect x="54.0785%" y="357" width="0.1511%" height="15" fill="rgb(245,159,27)" fg:x="359077222" fg:w="1003009"/><text x="54.3285%" y="367.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1,003,009 samples, 0.15%)</title><rect x="54.0785%" y="341" width="0.1511%" height="15" fill="rgb(245,172,44)" fg:x="359077222" fg:w="1003009"/><text x="54.3285%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1,003,009 samples, 0.15%)</title><rect x="54.0785%" y="325" width="0.1511%" height="15" fill="rgb(236,23,11)" fg:x="359077222" fg:w="1003009"/><text x="54.3285%" y="335.50"></text></g><g><title>core::intrinsics::copy (3,009,027 samples, 0.45%)</title><rect x="54.2296%" y="341" width="0.4532%" height="15" fill="rgb(205,117,38)" fg:x="360080231" fg:w="3009027"/><text x="54.4796%" y="351.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort13_optimal (4,012,036 samples, 0.60%)</title><rect x="54.2296%" y="373" width="0.6042%" height="15" fill="rgb(237,72,25)" fg:x="360080231" fg:w="4012036"/><text x="54.4796%" y="383.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (4,012,036 samples, 0.60%)</title><rect x="54.2296%" y="357" width="0.6042%" height="15" fill="rgb(244,70,9)" fg:x="360080231" fg:w="4012036"/><text x="54.4796%" y="367.50"></text></g><g><title>core::ptr::read (1,003,009 samples, 0.15%)</title><rect x="54.6828%" y="341" width="0.1511%" height="15" fill="rgb(217,125,39)" fg:x="363089258" fg:w="1003009"/><text x="54.9328%" y="351.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (9,027,081 samples, 1.36%)</title><rect x="53.6254%" y="389" width="1.3595%" height="15" fill="rgb(235,36,10)" fg:x="356068195" fg:w="9027081"/><text x="53.8754%" y="399.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort9_optimal (1,003,009 samples, 0.15%)</title><rect x="54.8338%" y="373" width="0.1511%" height="15" fill="rgb(251,123,47)" fg:x="364092267" fg:w="1003009"/><text x="55.0838%" y="383.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (1,003,009 samples, 0.15%)</title><rect x="54.8338%" y="357" width="0.1511%" height="15" fill="rgb(221,13,13)" fg:x="364092267" fg:w="1003009"/><text x="55.0838%" y="367.50"></text></g><g><title>core::ptr::read (1,003,009 samples, 0.15%)</title><rect x="54.8338%" y="341" width="0.1511%" height="15" fill="rgb(238,131,9)" fg:x="364092267" fg:w="1003009"/><text x="55.0838%" y="351.50"></text></g><g><title>core::intrinsics::copy (7,021,063 samples, 1.06%)</title><rect x="55.8912%" y="341" width="1.0574%" height="15" fill="rgb(211,50,8)" fg:x="371113330" fg:w="7021063"/><text x="56.1412%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4,012,036 samples, 0.60%)</title><rect x="56.9486%" y="341" width="0.6042%" height="15" fill="rgb(245,182,24)" fg:x="378134393" fg:w="4012036"/><text x="57.1986%" y="351.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (18,054,162 samples, 2.72%)</title><rect x="54.9849%" y="389" width="2.7190%" height="15" fill="rgb(242,14,37)" fg:x="365095276" fg:w="18054162"/><text x="55.2349%" y="399.50">co..</text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (18,054,162 samples, 2.72%)</title><rect x="54.9849%" y="373" width="2.7190%" height="15" fill="rgb(246,228,12)" fg:x="365095276" fg:w="18054162"/><text x="55.2349%" y="383.50">co..</text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::{{closure}} (13,039,117 samples, 1.96%)</title><rect x="55.7402%" y="357" width="1.9637%" height="15" fill="rgb(213,55,15)" fg:x="370110321" fg:w="13039117"/><text x="55.9902%" y="367.50">c..</text></g><g><title>core::ops::function::FnMut::call_mut (1,003,009 samples, 0.15%)</title><rect x="57.5529%" y="341" width="0.1511%" height="15" fill="rgb(209,9,3)" fg:x="382146429" fg:w="1003009"/><text x="57.8029%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1,003,009 samples, 0.15%)</title><rect x="57.5529%" y="325" width="0.1511%" height="15" fill="rgb(230,59,30)" fg:x="382146429" fg:w="1003009"/><text x="57.8029%" y="335.50"></text></g><g><title>core::slice::sort::shared::pivot::median3 (1,003,009 samples, 0.15%)</title><rect x="58.0060%" y="341" width="0.1511%" height="15" fill="rgb(209,121,21)" fg:x="385155456" fg:w="1003009"/><text x="58.2560%" y="351.50"></text></g><g><title>core::slice::sort::shared::pivot::choose_pivot (3,009,027 samples, 0.45%)</title><rect x="57.8550%" y="373" width="0.4532%" height="15" fill="rgb(220,109,13)" fg:x="384152447" fg:w="3009027"/><text x="58.1050%" y="383.50"></text></g><g><title>core::slice::sort::shared::pivot::median3_rec (2,006,018 samples, 0.30%)</title><rect x="58.0060%" y="357" width="0.3021%" height="15" fill="rgb(232,18,1)" fg:x="385155456" fg:w="2006018"/><text x="58.2560%" y="367.50"></text></g><g><title>core::slice::sort::shared::pivot::median3_rec (1,003,009 samples, 0.15%)</title><rect x="58.1571%" y="341" width="0.1511%" height="15" fill="rgb(215,41,42)" fg:x="386158465" fg:w="1003009"/><text x="58.4071%" y="351.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1,003,009 samples, 0.15%)</title><rect x="58.3082%" y="341" width="0.1511%" height="15" fill="rgb(224,123,36)" fg:x="387161474" fg:w="1003009"/><text x="58.5582%" y="351.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1,003,009 samples, 0.15%)</title><rect x="58.3082%" y="325" width="0.1511%" height="15" fill="rgb(240,125,3)" fg:x="387161474" fg:w="1003009"/><text x="58.5582%" y="335.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (1,003,009 samples, 0.15%)</title><rect x="58.3082%" y="309" width="0.1511%" height="15" fill="rgb(205,98,50)" fg:x="387161474" fg:w="1003009"/><text x="58.5582%" y="319.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (1,003,009 samples, 0.15%)</title><rect x="58.3082%" y="293" width="0.1511%" height="15" fill="rgb(205,185,37)" fg:x="387161474" fg:w="1003009"/><text x="58.5582%" y="303.50"></text></g><g><title>core::slice::sort::shared::smallsort::bidirectional_merge (4,012,036 samples, 0.60%)</title><rect x="58.3082%" y="357" width="0.6042%" height="15" fill="rgb(238,207,15)" fg:x="387161474" fg:w="4012036"/><text x="58.5582%" y="367.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_down (3,009,027 samples, 0.45%)</title><rect x="58.4592%" y="341" width="0.4532%" height="15" fill="rgb(213,199,42)" fg:x="388164483" fg:w="3009027"/><text x="58.7092%" y="351.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::wrapping_sub (1,003,009 samples, 0.15%)</title><rect x="58.7613%" y="325" width="0.1511%" height="15" fill="rgb(235,201,11)" fg:x="390170501" fg:w="1003009"/><text x="59.0113%" y="335.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::wrapping_offset (1,003,009 samples, 0.15%)</title><rect x="58.7613%" y="309" width="0.1511%" height="15" fill="rgb(207,46,11)" fg:x="390170501" fg:w="1003009"/><text x="59.0113%" y="319.50"></text></g><g><title>core::slice::sort::shared::smallsort::insertion_sort_shift_left (1,003,009 samples, 0.15%)</title><rect x="58.9124%" y="357" width="0.1511%" height="15" fill="rgb(241,35,35)" fg:x="391173510" fg:w="1003009"/><text x="59.1624%" y="367.50"></text></g><g><title>core::slice::sort::shared::smallsort::insert_tail (1,003,009 samples, 0.15%)</title><rect x="58.9124%" y="341" width="0.1511%" height="15" fill="rgb(243,32,47)" fg:x="391173510" fg:w="1003009"/><text x="59.1624%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,003,009 samples, 0.15%)</title><rect x="58.9124%" y="325" width="0.1511%" height="15" fill="rgb(247,202,23)" fg:x="391173510" fg:w="1003009"/><text x="59.1624%" y="335.50"></text></g><g><title>core::intrinsics::copy (2,006,018 samples, 0.30%)</title><rect x="59.0634%" y="325" width="0.3021%" height="15" fill="rgb(219,102,11)" fg:x="392176519" fg:w="2006018"/><text x="59.3134%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,003,009 samples, 0.15%)</title><rect x="59.3656%" y="325" width="0.1511%" height="15" fill="rgb(243,110,44)" fg:x="394182537" fg:w="1003009"/><text x="59.6156%" y="335.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort13_optimal (5,015,045 samples, 0.76%)</title><rect x="59.0634%" y="357" width="0.7553%" height="15" fill="rgb(222,74,54)" fg:x="392176519" fg:w="5015045"/><text x="59.3134%" y="367.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (5,015,045 samples, 0.76%)</title><rect x="59.0634%" y="341" width="0.7553%" height="15" fill="rgb(216,99,12)" fg:x="392176519" fg:w="5015045"/><text x="59.3134%" y="351.50"></text></g><g><title>core::ptr::read (2,006,018 samples, 0.30%)</title><rect x="59.5166%" y="325" width="0.3021%" height="15" fill="rgb(226,22,26)" fg:x="395185546" fg:w="2006018"/><text x="59.7666%" y="335.50"></text></g><g><title>core::intrinsics::copy (1,003,009 samples, 0.15%)</title><rect x="59.8187%" y="325" width="0.1511%" height="15" fill="rgb(217,163,10)" fg:x="397191564" fg:w="1003009"/><text x="60.0687%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,003,009 samples, 0.15%)</title><rect x="59.9698%" y="325" width="0.1511%" height="15" fill="rgb(213,25,53)" fg:x="398194573" fg:w="1003009"/><text x="60.2198%" y="335.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (13,039,117 samples, 1.96%)</title><rect x="58.3082%" y="373" width="1.9637%" height="15" fill="rgb(252,105,26)" fg:x="387161474" fg:w="13039117"/><text x="58.5582%" y="383.50">c..</text></g><g><title>core::slice::sort::shared::smallsort::sort9_optimal (3,009,027 samples, 0.45%)</title><rect x="59.8187%" y="357" width="0.4532%" height="15" fill="rgb(220,39,43)" fg:x="397191564" fg:w="3009027"/><text x="60.0687%" y="367.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (3,009,027 samples, 0.45%)</title><rect x="59.8187%" y="341" width="0.4532%" height="15" fill="rgb(229,68,48)" fg:x="397191564" fg:w="3009027"/><text x="60.0687%" y="351.50"></text></g><g><title>core::ptr::read (1,003,009 samples, 0.15%)</title><rect x="60.1208%" y="325" width="0.1511%" height="15" fill="rgb(252,8,32)" fg:x="399197582" fg:w="1003009"/><text x="60.3708%" y="335.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::swap (1,003,009 samples, 0.15%)</title><rect x="60.2719%" y="357" width="0.1511%" height="15" fill="rgb(223,20,43)" fg:x="400200591" fg:w="1003009"/><text x="60.5219%" y="367.50"></text></g><g><title>core::ptr::swap (1,003,009 samples, 0.15%)</title><rect x="60.2719%" y="341" width="0.1511%" height="15" fill="rgb(229,81,49)" fg:x="400200591" fg:w="1003009"/><text x="60.5219%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,003,009 samples, 0.15%)</title><rect x="60.2719%" y="325" width="0.1511%" height="15" fill="rgb(236,28,36)" fg:x="400200591" fg:w="1003009"/><text x="60.5219%" y="335.50"></text></g><g><title>core::intrinsics::copy (4,012,036 samples, 0.60%)</title><rect x="60.8761%" y="325" width="0.6042%" height="15" fill="rgb(249,185,26)" fg:x="404212627" fg:w="4012036"/><text x="61.1261%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5,015,045 samples, 0.76%)</title><rect x="61.4804%" y="325" width="0.7553%" height="15" fill="rgb(249,174,33)" fg:x="408224663" fg:w="5015045"/><text x="61.7304%" y="335.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (14,042,126 samples, 2.11%)</title><rect x="60.2719%" y="373" width="2.1148%" height="15" fill="rgb(233,201,37)" fg:x="400200591" fg:w="14042126"/><text x="60.5219%" y="383.50">c..</text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (13,039,117 samples, 1.96%)</title><rect x="60.4230%" y="357" width="1.9637%" height="15" fill="rgb(221,78,26)" fg:x="401203600" fg:w="13039117"/><text x="60.6730%" y="367.50">c..</text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::{{closure}} (10,030,090 samples, 1.51%)</title><rect x="60.8761%" y="341" width="1.5106%" height="15" fill="rgb(250,127,30)" fg:x="404212627" fg:w="10030090"/><text x="61.1261%" y="351.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1,003,009 samples, 0.15%)</title><rect x="62.2356%" y="325" width="0.1511%" height="15" fill="rgb(230,49,44)" fg:x="413239708" fg:w="1003009"/><text x="62.4856%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1,003,009 samples, 0.15%)</title><rect x="62.2356%" y="309" width="0.1511%" height="15" fill="rgb(229,67,23)" fg:x="413239708" fg:w="1003009"/><text x="62.4856%" y="319.50"></text></g><g><title>core::slice::sort::shared::pivot::median3 (1,003,009 samples, 0.15%)</title><rect x="62.3867%" y="341" width="0.1511%" height="15" fill="rgb(249,83,47)" fg:x="414242717" fg:w="1003009"/><text x="62.6367%" y="351.50"></text></g><g><title>core::slice::sort::shared::pivot::choose_pivot (2,006,018 samples, 0.30%)</title><rect x="62.3867%" y="357" width="0.3021%" height="15" fill="rgb(215,43,3)" fg:x="414242717" fg:w="2006018"/><text x="62.6367%" y="367.50"></text></g><g><title>core::slice::sort::shared::pivot::median3_rec (1,003,009 samples, 0.15%)</title><rect x="62.5378%" y="341" width="0.1511%" height="15" fill="rgb(238,154,13)" fg:x="415245726" fg:w="1003009"/><text x="62.7878%" y="351.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1,003,009 samples, 0.15%)</title><rect x="62.5378%" y="325" width="0.1511%" height="15" fill="rgb(219,56,2)" fg:x="415245726" fg:w="1003009"/><text x="62.7878%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2,006,018 samples, 0.30%)</title><rect x="62.8399%" y="341" width="0.3021%" height="15" fill="rgb(233,0,4)" fg:x="417251744" fg:w="2006018"/><text x="63.0899%" y="351.50"></text></g><g><title>[libc.so.6] (2,006,018 samples, 0.30%)</title><rect x="62.8399%" y="325" width="0.3021%" height="15" fill="rgb(235,30,7)" fg:x="417251744" fg:w="2006018"/><text x="63.0899%" y="335.50"></text></g><g><title>core::slice::sort::shared::smallsort::bidirectional_merge (3,009,027 samples, 0.45%)</title><rect x="63.1420%" y="341" width="0.4532%" height="15" fill="rgb(250,79,13)" fg:x="419257762" fg:w="3009027"/><text x="63.3920%" y="351.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_down (3,009,027 samples, 0.45%)</title><rect x="63.1420%" y="325" width="0.4532%" height="15" fill="rgb(211,146,34)" fg:x="419257762" fg:w="3009027"/><text x="63.3920%" y="335.50"></text></g><g><title>core::slice::sort::shared::smallsort::insertion_sort_shift_left (2,006,018 samples, 0.30%)</title><rect x="63.5952%" y="341" width="0.3021%" height="15" fill="rgb(228,22,38)" fg:x="422266789" fg:w="2006018"/><text x="63.8452%" y="351.50"></text></g><g><title>core::slice::sort::shared::smallsort::insert_tail (2,006,018 samples, 0.30%)</title><rect x="63.5952%" y="325" width="0.3021%" height="15" fill="rgb(235,168,5)" fg:x="422266789" fg:w="2006018"/><text x="63.8452%" y="335.50"></text></g><g><title>core::intrinsics::copy (1,003,009 samples, 0.15%)</title><rect x="63.8973%" y="309" width="0.1511%" height="15" fill="rgb(221,155,16)" fg:x="424272807" fg:w="1003009"/><text x="64.1473%" y="319.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort13_optimal (4,012,036 samples, 0.60%)</title><rect x="63.8973%" y="341" width="0.6042%" height="15" fill="rgb(215,215,53)" fg:x="424272807" fg:w="4012036"/><text x="64.1473%" y="351.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (4,012,036 samples, 0.60%)</title><rect x="63.8973%" y="325" width="0.6042%" height="15" fill="rgb(223,4,10)" fg:x="424272807" fg:w="4012036"/><text x="64.1473%" y="335.50"></text></g><g><title>core::ptr::read (3,009,027 samples, 0.45%)</title><rect x="64.0483%" y="309" width="0.4532%" height="15" fill="rgb(234,103,6)" fg:x="425275816" fg:w="3009027"/><text x="64.2983%" y="319.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (14,042,126 samples, 2.11%)</title><rect x="62.6888%" y="357" width="2.1148%" height="15" fill="rgb(227,97,0)" fg:x="416248735" fg:w="14042126"/><text x="62.9388%" y="367.50">c..</text></g><g><title>core::slice::sort::shared::smallsort::sort9_optimal (2,006,018 samples, 0.30%)</title><rect x="64.5015%" y="341" width="0.3021%" height="15" fill="rgb(234,150,53)" fg:x="428284843" fg:w="2006018"/><text x="64.7515%" y="351.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (2,006,018 samples, 0.30%)</title><rect x="64.5015%" y="325" width="0.3021%" height="15" fill="rgb(228,201,54)" fg:x="428284843" fg:w="2006018"/><text x="64.7515%" y="335.50"></text></g><g><title>core::ptr::read (2,006,018 samples, 0.30%)</title><rect x="64.5015%" y="309" width="0.3021%" height="15" fill="rgb(222,22,37)" fg:x="428284843" fg:w="2006018"/><text x="64.7515%" y="319.50"></text></g><g><title>core::intrinsics::copy (5,015,045 samples, 0.76%)</title><rect x="65.4079%" y="309" width="0.7553%" height="15" fill="rgb(237,53,32)" fg:x="434302897" fg:w="5015045"/><text x="65.6579%" y="319.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (11,033,099 samples, 1.66%)</title><rect x="64.8036%" y="357" width="1.6616%" height="15" fill="rgb(233,25,53)" fg:x="430290861" fg:w="11033099"/><text x="65.0536%" y="367.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (10,030,090 samples, 1.51%)</title><rect x="64.9547%" y="341" width="1.5106%" height="15" fill="rgb(210,40,34)" fg:x="431293870" fg:w="10030090"/><text x="65.2047%" y="351.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::{{closure}} (8,024,072 samples, 1.21%)</title><rect x="65.2568%" y="325" width="1.2085%" height="15" fill="rgb(241,220,44)" fg:x="433299888" fg:w="8024072"/><text x="65.5068%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2,006,018 samples, 0.30%)</title><rect x="66.1631%" y="309" width="0.3021%" height="15" fill="rgb(235,28,35)" fg:x="439317942" fg:w="2006018"/><text x="66.4131%" y="319.50"></text></g><g><title>core::slice::sort::shared::pivot::choose_pivot (1,003,009 samples, 0.15%)</title><rect x="66.4653%" y="341" width="0.1511%" height="15" fill="rgb(210,56,17)" fg:x="441323960" fg:w="1003009"/><text x="66.7153%" y="351.50"></text></g><g><title>core::slice::sort::shared::pivot::median3_rec (1,003,009 samples, 0.15%)</title><rect x="66.4653%" y="325" width="0.1511%" height="15" fill="rgb(224,130,29)" fg:x="441323960" fg:w="1003009"/><text x="66.7153%" y="335.50"></text></g><g><title>core::slice::sort::shared::pivot::median3_rec (1,003,009 samples, 0.15%)</title><rect x="66.4653%" y="309" width="0.1511%" height="15" fill="rgb(235,212,8)" fg:x="441323960" fg:w="1003009"/><text x="66.7153%" y="319.50"></text></g><g><title>core::slice::sort::shared::pivot::median3 (1,003,009 samples, 0.15%)</title><rect x="66.4653%" y="293" width="0.1511%" height="15" fill="rgb(223,33,50)" fg:x="441323960" fg:w="1003009"/><text x="66.7153%" y="303.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1,003,009 samples, 0.15%)</title><rect x="66.4653%" y="277" width="0.1511%" height="15" fill="rgb(219,149,13)" fg:x="441323960" fg:w="1003009"/><text x="66.7153%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1,003,009 samples, 0.15%)</title><rect x="66.4653%" y="261" width="0.1511%" height="15" fill="rgb(250,156,29)" fg:x="441323960" fg:w="1003009"/><text x="66.7153%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,003,009 samples, 0.15%)</title><rect x="66.6163%" y="325" width="0.1511%" height="15" fill="rgb(216,193,19)" fg:x="442326969" fg:w="1003009"/><text x="66.8663%" y="335.50"></text></g><g><title>[libc.so.6] (1,003,009 samples, 0.15%)</title><rect x="66.6163%" y="309" width="0.1511%" height="15" fill="rgb(216,135,14)" fg:x="442326969" fg:w="1003009"/><text x="66.8663%" y="319.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_down (1,003,009 samples, 0.15%)</title><rect x="66.7674%" y="309" width="0.1511%" height="15" fill="rgb(241,47,5)" fg:x="443329978" fg:w="1003009"/><text x="67.0174%" y="319.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1,003,009 samples, 0.15%)</title><rect x="66.7674%" y="293" width="0.1511%" height="15" fill="rgb(233,42,35)" fg:x="443329978" fg:w="1003009"/><text x="67.0174%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1,003,009 samples, 0.15%)</title><rect x="66.7674%" y="277" width="0.1511%" height="15" fill="rgb(231,13,6)" fg:x="443329978" fg:w="1003009"/><text x="67.0174%" y="287.50"></text></g><g><title>core::slice::sort::shared::smallsort::bidirectional_merge (3,009,027 samples, 0.45%)</title><rect x="66.7674%" y="325" width="0.4532%" height="15" fill="rgb(207,181,40)" fg:x="443329978" fg:w="3009027"/><text x="67.0174%" y="335.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_up (2,006,018 samples, 0.30%)</title><rect x="66.9184%" y="309" width="0.3021%" height="15" fill="rgb(254,173,49)" fg:x="444332987" fg:w="2006018"/><text x="67.1684%" y="319.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1,003,009 samples, 0.15%)</title><rect x="67.0695%" y="293" width="0.1511%" height="15" fill="rgb(221,1,38)" fg:x="445335996" fg:w="1003009"/><text x="67.3195%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,003,009 samples, 0.15%)</title><rect x="67.3716%" y="293" width="0.1511%" height="15" fill="rgb(206,124,46)" fg:x="447342014" fg:w="1003009"/><text x="67.6216%" y="303.50"></text></g><g><title>core::slice::sort::shared::smallsort::insertion_sort_shift_left (3,009,027 samples, 0.45%)</title><rect x="67.2205%" y="325" width="0.4532%" height="15" fill="rgb(249,21,11)" fg:x="446339005" fg:w="3009027"/><text x="67.4705%" y="335.50"></text></g><g><title>core::slice::sort::shared::smallsort::insert_tail (3,009,027 samples, 0.45%)</title><rect x="67.2205%" y="309" width="0.4532%" height="15" fill="rgb(222,201,40)" fg:x="446339005" fg:w="3009027"/><text x="67.4705%" y="319.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1,003,009 samples, 0.15%)</title><rect x="67.5227%" y="293" width="0.1511%" height="15" fill="rgb(235,61,29)" fg:x="448345023" fg:w="1003009"/><text x="67.7727%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1,003,009 samples, 0.15%)</title><rect x="67.5227%" y="277" width="0.1511%" height="15" fill="rgb(219,207,3)" fg:x="448345023" fg:w="1003009"/><text x="67.7727%" y="287.50"></text></g><g><title>core::intrinsics::copy (1,003,009 samples, 0.15%)</title><rect x="67.6737%" y="293" width="0.1511%" height="15" fill="rgb(222,56,46)" fg:x="449348032" fg:w="1003009"/><text x="67.9237%" y="303.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (9,027,081 samples, 1.36%)</title><rect x="66.6163%" y="341" width="1.3595%" height="15" fill="rgb(239,76,54)" fg:x="442326969" fg:w="9027081"/><text x="66.8663%" y="351.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort13_optimal (2,006,018 samples, 0.30%)</title><rect x="67.6737%" y="325" width="0.3021%" height="15" fill="rgb(231,124,27)" fg:x="449348032" fg:w="2006018"/><text x="67.9237%" y="335.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (2,006,018 samples, 0.30%)</title><rect x="67.6737%" y="309" width="0.3021%" height="15" fill="rgb(249,195,6)" fg:x="449348032" fg:w="2006018"/><text x="67.9237%" y="319.50"></text></g><g><title>core::ptr::read (1,003,009 samples, 0.15%)</title><rect x="67.8248%" y="293" width="0.1511%" height="15" fill="rgb(237,174,47)" fg:x="450351041" fg:w="1003009"/><text x="68.0748%" y="303.50"></text></g><g><title>core::intrinsics::copy (1,003,009 samples, 0.15%)</title><rect x="68.2779%" y="293" width="0.1511%" height="15" fill="rgb(206,201,31)" fg:x="453360068" fg:w="1003009"/><text x="68.5279%" y="303.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (4,012,036 samples, 0.60%)</title><rect x="67.9758%" y="341" width="0.6042%" height="15" fill="rgb(231,57,52)" fg:x="451354050" fg:w="4012036"/><text x="68.2258%" y="351.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (4,012,036 samples, 0.60%)</title><rect x="67.9758%" y="325" width="0.6042%" height="15" fill="rgb(248,177,22)" fg:x="451354050" fg:w="4012036"/><text x="68.2258%" y="335.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::{{closure}} (2,006,018 samples, 0.30%)</title><rect x="68.2779%" y="309" width="0.3021%" height="15" fill="rgb(215,211,37)" fg:x="453360068" fg:w="2006018"/><text x="68.5279%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,003,009 samples, 0.15%)</title><rect x="68.4290%" y="293" width="0.1511%" height="15" fill="rgb(241,128,51)" fg:x="454363077" fg:w="1003009"/><text x="68.6790%" y="303.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (1,003,009 samples, 0.15%)</title><rect x="68.7311%" y="325" width="0.1511%" height="15" fill="rgb(227,165,31)" fg:x="456369095" fg:w="1003009"/><text x="68.9811%" y="335.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (2,006,018 samples, 0.30%)</title><rect x="68.8822%" y="325" width="0.3021%" height="15" fill="rgb(228,167,24)" fg:x="457372104" fg:w="2006018"/><text x="69.1322%" y="335.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (2,006,018 samples, 0.30%)</title><rect x="68.8822%" y="309" width="0.3021%" height="15" fill="rgb(228,143,12)" fg:x="457372104" fg:w="2006018"/><text x="69.1322%" y="319.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::{{closure}} (2,006,018 samples, 0.30%)</title><rect x="68.8822%" y="293" width="0.3021%" height="15" fill="rgb(249,149,8)" fg:x="457372104" fg:w="2006018"/><text x="69.1322%" y="303.50"></text></g><g><title>core::intrinsics::copy (2,006,018 samples, 0.30%)</title><rect x="68.8822%" y="277" width="0.3021%" height="15" fill="rgb(243,35,44)" fg:x="457372104" fg:w="2006018"/><text x="69.1322%" y="287.50"></text></g><g><title>aoc24::days::day1::day_1_work (460,381,131 samples, 69.34%)</title><rect x="0.0000%" y="453" width="69.3353%" height="15" fill="rgb(246,89,9)" fg:x="0" fg:w="460381131"/><text x="0.2500%" y="463.50">aoc24::days::day1::day_1_work</text></g><g><title>core::slice::&lt;impl [T]&gt;::sort_unstable (107,321,963 samples, 16.16%)</title><rect x="53.1722%" y="437" width="16.1631%" height="15" fill="rgb(233,213,13)" fg:x="353059168" fg:w="107321963"/><text x="53.4222%" y="447.50">core::slice::&lt;impl [T]&gt;::..</text></g><g><title>core::slice::sort::unstable::sort (107,321,963 samples, 16.16%)</title><rect x="53.1722%" y="421" width="16.1631%" height="15" fill="rgb(233,141,41)" fg:x="353059168" fg:w="107321963"/><text x="53.4222%" y="431.50">core::slice::sort::unstab..</text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (106,318,954 samples, 16.01%)</title><rect x="53.3233%" y="405" width="16.0121%" height="15" fill="rgb(239,167,4)" fg:x="354062177" fg:w="106318954"/><text x="53.5733%" y="415.50">core::slice::sort::unstab..</text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (77,231,693 samples, 11.63%)</title><rect x="57.7039%" y="389" width="11.6314%" height="15" fill="rgb(209,217,16)" fg:x="383149438" fg:w="77231693"/><text x="57.9539%" y="399.50">core::slice::sort..</text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (46,138,414 samples, 6.95%)</title><rect x="62.3867%" y="373" width="6.9486%" height="15" fill="rgb(219,88,35)" fg:x="414242717" fg:w="46138414"/><text x="62.6367%" y="383.50">core::sli..</text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (19,057,171 samples, 2.87%)</title><rect x="66.4653%" y="357" width="2.8701%" height="15" fill="rgb(220,193,23)" fg:x="441323960" fg:w="19057171"/><text x="66.7153%" y="367.50">co..</text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (5,015,045 samples, 0.76%)</title><rect x="68.5801%" y="341" width="0.7553%" height="15" fill="rgb(230,90,52)" fg:x="455366086" fg:w="5015045"/><text x="68.8301%" y="351.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (1,003,009 samples, 0.15%)</title><rect x="69.1843%" y="325" width="0.1511%" height="15" fill="rgb(252,106,19)" fg:x="459378122" fg:w="1003009"/><text x="69.4343%" y="335.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (1,003,009 samples, 0.15%)</title><rect x="69.1843%" y="309" width="0.1511%" height="15" fill="rgb(206,74,20)" fg:x="459378122" fg:w="1003009"/><text x="69.4343%" y="319.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort9_optimal (1,003,009 samples, 0.15%)</title><rect x="69.1843%" y="293" width="0.1511%" height="15" fill="rgb(230,138,44)" fg:x="459378122" fg:w="1003009"/><text x="69.4343%" y="303.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (1,003,009 samples, 0.15%)</title><rect x="69.1843%" y="277" width="0.1511%" height="15" fill="rgb(235,182,43)" fg:x="459378122" fg:w="1003009"/><text x="69.4343%" y="287.50"></text></g><g><title>core::intrinsics::copy (1,003,009 samples, 0.15%)</title><rect x="69.1843%" y="261" width="0.1511%" height="15" fill="rgb(242,16,51)" fg:x="459378122" fg:w="1003009"/><text x="69.4343%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::fs::File&gt; (1,003,009 samples, 0.15%)</title><rect x="69.3353%" y="405" width="0.1511%" height="15" fill="rgb(248,9,4)" fg:x="460381131" fg:w="1003009"/><text x="69.5853%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sys::pal::unix::fs::File&gt; (1,003,009 samples, 0.15%)</title><rect x="69.3353%" y="389" width="0.1511%" height="15" fill="rgb(210,31,22)" fg:x="460381131" fg:w="1003009"/><text x="69.5853%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sys::pal::unix::fd::FileDesc&gt; (1,003,009 samples, 0.15%)</title><rect x="69.3353%" y="373" width="0.1511%" height="15" fill="rgb(239,54,39)" fg:x="460381131" fg:w="1003009"/><text x="69.5853%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::os::fd::owned::OwnedFd&gt; (1,003,009 samples, 0.15%)</title><rect x="69.3353%" y="357" width="0.1511%" height="15" fill="rgb(230,99,41)" fg:x="460381131" fg:w="1003009"/><text x="69.5853%" y="367.50"></text></g><g><title>&lt;std::os::fd::owned::OwnedFd as core::ops::drop::Drop&gt;::drop (1,003,009 samples, 0.15%)</title><rect x="69.3353%" y="341" width="0.1511%" height="15" fill="rgb(253,106,12)" fg:x="460381131" fg:w="1003009"/><text x="69.5853%" y="351.50"></text></g><g><title>close (1,003,009 samples, 0.15%)</title><rect x="69.3353%" y="325" width="0.1511%" height="15" fill="rgb(213,46,41)" fg:x="460381131" fg:w="1003009"/><text x="69.5853%" y="335.50"></text></g><g><title>aoc24::days::day1::day_1 (463,390,158 samples, 69.79%)</title><rect x="0.0000%" y="469" width="69.7885%" height="15" fill="rgb(215,133,35)" fg:x="0" fg:w="463390158"/><text x="0.2500%" y="479.50">aoc24::days::day1::day_1</text></g><g><title>aoc24::days::file_loader::load_day (3,009,027 samples, 0.45%)</title><rect x="69.3353%" y="453" width="0.4532%" height="15" fill="rgb(213,28,5)" fg:x="460381131" fg:w="3009027"/><text x="69.5853%" y="463.50"></text></g><g><title>std::fs::read_to_string (3,009,027 samples, 0.45%)</title><rect x="69.3353%" y="437" width="0.4532%" height="15" fill="rgb(215,77,49)" fg:x="460381131" fg:w="3009027"/><text x="69.5853%" y="447.50"></text></g><g><title>std::fs::read_to_string::inner (3,009,027 samples, 0.45%)</title><rect x="69.3353%" y="421" width="0.4532%" height="15" fill="rgb(248,100,22)" fg:x="460381131" fg:w="3009027"/><text x="69.5853%" y="431.50"></text></g><g><title>std::io::default_read_to_string (2,006,018 samples, 0.30%)</title><rect x="69.4864%" y="405" width="0.3021%" height="15" fill="rgb(208,67,9)" fg:x="461384140" fg:w="2006018"/><text x="69.7364%" y="415.50"></text></g><g><title>std::io::append_to_string (2,006,018 samples, 0.30%)</title><rect x="69.4864%" y="389" width="0.3021%" height="15" fill="rgb(219,133,21)" fg:x="461384140" fg:w="2006018"/><text x="69.7364%" y="399.50"></text></g><g><title>core::str::converts::from_utf8 (2,006,018 samples, 0.30%)</title><rect x="69.4864%" y="373" width="0.3021%" height="15" fill="rgb(246,46,29)" fg:x="461384140" fg:w="2006018"/><text x="69.7364%" y="383.50"></text></g><g><title>core::str::validations::run_utf8_validation (2,006,018 samples, 0.30%)</title><rect x="69.4864%" y="357" width="0.3021%" height="15" fill="rgb(246,185,52)" fg:x="461384140" fg:w="2006018"/><text x="69.7364%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::ops::index::Index&lt;I&gt;&gt;::index (2,006,018 samples, 0.30%)</title><rect x="70.9970%" y="421" width="0.3021%" height="15" fill="rgb(252,136,11)" fg:x="471414230" fg:w="2006018"/><text x="71.2470%" y="431.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::index (2,006,018 samples, 0.30%)</title><rect x="70.9970%" y="405" width="0.3021%" height="15" fill="rgb(219,138,53)" fg:x="471414230" fg:w="2006018"/><text x="71.2470%" y="415.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get (2,006,018 samples, 0.30%)</title><rect x="70.9970%" y="389" width="0.3021%" height="15" fill="rgb(211,51,23)" fg:x="471414230" fg:w="2006018"/><text x="71.2470%" y="399.50"></text></g><g><title>core::str::&lt;impl str&gt;::is_char_boundary (2,006,018 samples, 0.30%)</title><rect x="70.9970%" y="373" width="0.3021%" height="15" fill="rgb(247,221,28)" fg:x="471414230" fg:w="2006018"/><text x="71.2470%" y="383.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (2,006,018 samples, 0.30%)</title><rect x="70.9970%" y="357" width="0.3021%" height="15" fill="rgb(251,222,45)" fg:x="471414230" fg:w="2006018"/><text x="71.2470%" y="367.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1,003,009 samples, 0.15%)</title><rect x="71.1480%" y="341" width="0.1511%" height="15" fill="rgb(217,162,53)" fg:x="472417239" fg:w="1003009"/><text x="71.3980%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (10,030,090 samples, 1.51%)</title><rect x="71.2991%" y="421" width="1.5106%" height="15" fill="rgb(229,93,14)" fg:x="473420248" fg:w="10030090"/><text x="71.5491%" y="431.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (2,006,018 samples, 0.30%)</title><rect x="72.8097%" y="421" width="0.3021%" height="15" fill="rgb(209,67,49)" fg:x="483450338" fg:w="2006018"/><text x="73.0597%" y="431.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (2,006,018 samples, 0.30%)</title><rect x="72.8097%" y="405" width="0.3021%" height="15" fill="rgb(213,87,29)" fg:x="483450338" fg:w="2006018"/><text x="73.0597%" y="415.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (2,006,018 samples, 0.30%)</title><rect x="72.8097%" y="389" width="0.3021%" height="15" fill="rgb(205,151,52)" fg:x="483450338" fg:w="2006018"/><text x="73.0597%" y="399.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (2,006,018 samples, 0.30%)</title><rect x="72.8097%" y="373" width="0.3021%" height="15" fill="rgb(253,215,39)" fg:x="483450338" fg:w="2006018"/><text x="73.0597%" y="383.50"></text></g><g><title>aoc24::days::day1::unpack_inp_opt (97,291,873 samples, 14.65%)</title><rect x="69.7885%" y="437" width="14.6526%" height="15" fill="rgb(221,220,41)" fg:x="463390158" fg:w="97291873"/><text x="70.0385%" y="447.50">aoc24::days::day1::unp..</text></g><g><title>core::str::&lt;impl str&gt;::parse (75,225,675 samples, 11.33%)</title><rect x="73.1118%" y="421" width="11.3293%" height="15" fill="rgb(218,133,21)" fg:x="485456356" fg:w="75225675"/><text x="73.3618%" y="431.50">core::str::&lt;impl ..</text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for u32&gt;::from_str (73,219,657 samples, 11.03%)</title><rect x="73.4139%" y="405" width="11.0272%" height="15" fill="rgb(221,193,43)" fg:x="487462374" fg:w="73219657"/><text x="73.6639%" y="415.50">core::num::&lt;impl..</text></g><g><title>core::num::&lt;impl u32&gt;::from_str_radix (59,177,531 samples, 8.91%)</title><rect x="75.5287%" y="389" width="8.9124%" height="15" fill="rgb(240,128,52)" fg:x="501504500" fg:w="59177531"/><text x="75.7787%" y="399.50">core::num::&lt;i..</text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (1,003,009 samples, 0.15%)</title><rect x="84.4411%" y="405" width="0.1511%" height="15" fill="rgb(253,114,12)" fg:x="560682031" fg:w="1003009"/><text x="84.6911%" y="415.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort13_optimal (1,003,009 samples, 0.15%)</title><rect x="84.4411%" y="389" width="0.1511%" height="15" fill="rgb(215,223,47)" fg:x="560682031" fg:w="1003009"/><text x="84.6911%" y="399.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (1,003,009 samples, 0.15%)</title><rect x="84.4411%" y="373" width="0.1511%" height="15" fill="rgb(248,225,23)" fg:x="560682031" fg:w="1003009"/><text x="84.6911%" y="383.50"></text></g><g><title>core::ptr::read (1,003,009 samples, 0.15%)</title><rect x="84.4411%" y="357" width="0.1511%" height="15" fill="rgb(250,108,0)" fg:x="560682031" fg:w="1003009"/><text x="84.6911%" y="367.50"></text></g><g><title>core::slice::sort::shared::pivot::choose_pivot (2,006,018 samples, 0.30%)</title><rect x="84.7432%" y="389" width="0.3021%" height="15" fill="rgb(228,208,7)" fg:x="562688049" fg:w="2006018"/><text x="84.9932%" y="399.50"></text></g><g><title>core::slice::sort::shared::pivot::median3_rec (2,006,018 samples, 0.30%)</title><rect x="84.7432%" y="373" width="0.3021%" height="15" fill="rgb(244,45,10)" fg:x="562688049" fg:w="2006018"/><text x="84.9932%" y="383.50"></text></g><g><title>core::slice::sort::shared::pivot::median3_rec (1,003,009 samples, 0.15%)</title><rect x="84.8943%" y="357" width="0.1511%" height="15" fill="rgb(207,125,25)" fg:x="563691058" fg:w="1003009"/><text x="85.1443%" y="367.50"></text></g><g><title>core::slice::sort::shared::pivot::median3 (1,003,009 samples, 0.15%)</title><rect x="84.8943%" y="341" width="0.1511%" height="15" fill="rgb(210,195,18)" fg:x="563691058" fg:w="1003009"/><text x="85.1443%" y="351.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1,003,009 samples, 0.15%)</title><rect x="84.8943%" y="325" width="0.1511%" height="15" fill="rgb(249,80,12)" fg:x="563691058" fg:w="1003009"/><text x="85.1443%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::lt (1,003,009 samples, 0.15%)</title><rect x="84.8943%" y="309" width="0.1511%" height="15" fill="rgb(221,65,9)" fg:x="563691058" fg:w="1003009"/><text x="85.1443%" y="319.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort13_optimal (1,003,009 samples, 0.15%)</title><rect x="85.0453%" y="373" width="0.1511%" height="15" fill="rgb(235,49,36)" fg:x="564694067" fg:w="1003009"/><text x="85.2953%" y="383.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (1,003,009 samples, 0.15%)</title><rect x="85.0453%" y="357" width="0.1511%" height="15" fill="rgb(225,32,20)" fg:x="564694067" fg:w="1003009"/><text x="85.2953%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,003,009 samples, 0.15%)</title><rect x="85.0453%" y="341" width="0.1511%" height="15" fill="rgb(215,141,46)" fg:x="564694067" fg:w="1003009"/><text x="85.2953%" y="351.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (2,006,018 samples, 0.30%)</title><rect x="85.0453%" y="389" width="0.3021%" height="15" fill="rgb(250,160,47)" fg:x="564694067" fg:w="2006018"/><text x="85.2953%" y="399.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort9_optimal (1,003,009 samples, 0.15%)</title><rect x="85.1964%" y="373" width="0.1511%" height="15" fill="rgb(216,222,40)" fg:x="565697076" fg:w="1003009"/><text x="85.4464%" y="383.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (1,003,009 samples, 0.15%)</title><rect x="85.1964%" y="357" width="0.1511%" height="15" fill="rgb(234,217,39)" fg:x="565697076" fg:w="1003009"/><text x="85.4464%" y="367.50"></text></g><g><title>core::ptr::read (1,003,009 samples, 0.15%)</title><rect x="85.1964%" y="341" width="0.1511%" height="15" fill="rgb(207,178,40)" fg:x="565697076" fg:w="1003009"/><text x="85.4464%" y="351.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::swap (1,003,009 samples, 0.15%)</title><rect x="85.3474%" y="373" width="0.1511%" height="15" fill="rgb(221,136,13)" fg:x="566700085" fg:w="1003009"/><text x="85.5974%" y="383.50"></text></g><g><title>core::ptr::swap (1,003,009 samples, 0.15%)</title><rect x="85.3474%" y="357" width="0.1511%" height="15" fill="rgb(249,199,10)" fg:x="566700085" fg:w="1003009"/><text x="85.5974%" y="367.50"></text></g><g><title>core::intrinsics::copy (1,003,009 samples, 0.15%)</title><rect x="85.3474%" y="341" width="0.1511%" height="15" fill="rgb(249,222,13)" fg:x="566700085" fg:w="1003009"/><text x="85.5974%" y="351.50"></text></g><g><title>core::intrinsics::copy (4,012,036 samples, 0.60%)</title><rect x="86.4048%" y="341" width="0.6042%" height="15" fill="rgb(244,185,38)" fg:x="573721148" fg:w="4012036"/><text x="86.6548%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4,012,036 samples, 0.60%)</title><rect x="87.0091%" y="341" width="0.6042%" height="15" fill="rgb(236,202,9)" fg:x="577733184" fg:w="4012036"/><text x="87.2591%" y="351.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (16,048,144 samples, 2.42%)</title><rect x="85.3474%" y="389" width="2.4169%" height="15" fill="rgb(250,229,37)" fg:x="566700085" fg:w="16048144"/><text x="85.5974%" y="399.50">co..</text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (15,045,135 samples, 2.27%)</title><rect x="85.4985%" y="373" width="2.2659%" height="15" fill="rgb(206,174,23)" fg:x="567703094" fg:w="15045135"/><text x="85.7485%" y="383.50">c..</text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::{{closure}} (9,027,081 samples, 1.36%)</title><rect x="86.4048%" y="357" width="1.3595%" height="15" fill="rgb(211,33,43)" fg:x="573721148" fg:w="9027081"/><text x="86.6548%" y="367.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1,003,009 samples, 0.15%)</title><rect x="87.6133%" y="341" width="0.1511%" height="15" fill="rgb(245,58,50)" fg:x="581745220" fg:w="1003009"/><text x="87.8633%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::lt (1,003,009 samples, 0.15%)</title><rect x="87.6133%" y="325" width="0.1511%" height="15" fill="rgb(244,68,36)" fg:x="581745220" fg:w="1003009"/><text x="87.8633%" y="335.50"></text></g><g><title>core::slice::sort::shared::pivot::median3 (1,003,009 samples, 0.15%)</title><rect x="87.7644%" y="357" width="0.1511%" height="15" fill="rgb(232,229,15)" fg:x="582748229" fg:w="1003009"/><text x="88.0144%" y="367.50"></text></g><g><title>core::slice::sort::shared::pivot::median3 (1,003,009 samples, 0.15%)</title><rect x="88.0665%" y="341" width="0.1511%" height="15" fill="rgb(254,30,23)" fg:x="584754247" fg:w="1003009"/><text x="88.3165%" y="351.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1,003,009 samples, 0.15%)</title><rect x="88.0665%" y="325" width="0.1511%" height="15" fill="rgb(235,160,14)" fg:x="584754247" fg:w="1003009"/><text x="88.3165%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::lt (1,003,009 samples, 0.15%)</title><rect x="88.0665%" y="309" width="0.1511%" height="15" fill="rgb(212,155,44)" fg:x="584754247" fg:w="1003009"/><text x="88.3165%" y="319.50"></text></g><g><title>core::slice::sort::shared::pivot::choose_pivot (4,012,036 samples, 0.60%)</title><rect x="87.7644%" y="373" width="0.6042%" height="15" fill="rgb(226,2,50)" fg:x="582748229" fg:w="4012036"/><text x="88.0144%" y="383.50"></text></g><g><title>core::slice::sort::shared::pivot::median3_rec (3,009,027 samples, 0.45%)</title><rect x="87.9154%" y="357" width="0.4532%" height="15" fill="rgb(234,177,6)" fg:x="583751238" fg:w="3009027"/><text x="88.1654%" y="367.50"></text></g><g><title>core::slice::sort::shared::pivot::median3_rec (1,003,009 samples, 0.15%)</title><rect x="88.2175%" y="341" width="0.1511%" height="15" fill="rgb(217,24,9)" fg:x="585757256" fg:w="1003009"/><text x="88.4675%" y="351.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_down (3,009,027 samples, 0.45%)</title><rect x="88.3686%" y="341" width="0.4532%" height="15" fill="rgb(220,13,46)" fg:x="586760265" fg:w="3009027"/><text x="88.6186%" y="351.50"></text></g><g><title>core::ops::function::FnMut::call_mut (2,006,018 samples, 0.30%)</title><rect x="88.5196%" y="325" width="0.3021%" height="15" fill="rgb(239,221,27)" fg:x="587763274" fg:w="2006018"/><text x="88.7696%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::lt (2,006,018 samples, 0.30%)</title><rect x="88.5196%" y="309" width="0.3021%" height="15" fill="rgb(222,198,25)" fg:x="587763274" fg:w="2006018"/><text x="88.7696%" y="319.50"></text></g><g><title>core::slice::sort::shared::smallsort::bidirectional_merge (5,015,045 samples, 0.76%)</title><rect x="88.3686%" y="357" width="0.7553%" height="15" fill="rgb(211,99,13)" fg:x="586760265" fg:w="5015045"/><text x="88.6186%" y="367.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_up (2,006,018 samples, 0.30%)</title><rect x="88.8218%" y="341" width="0.3021%" height="15" fill="rgb(232,111,31)" fg:x="589769292" fg:w="2006018"/><text x="89.0718%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2,006,018 samples, 0.30%)</title><rect x="88.8218%" y="325" width="0.3021%" height="15" fill="rgb(245,82,37)" fg:x="589769292" fg:w="2006018"/><text x="89.0718%" y="335.50"></text></g><g><title>core::slice::sort::shared::smallsort::insertion_sort_shift_left (2,006,018 samples, 0.30%)</title><rect x="89.1239%" y="357" width="0.3021%" height="15" fill="rgb(227,149,46)" fg:x="591775310" fg:w="2006018"/><text x="89.3739%" y="367.50"></text></g><g><title>core::slice::sort::shared::smallsort::insert_tail (2,006,018 samples, 0.30%)</title><rect x="89.1239%" y="341" width="0.3021%" height="15" fill="rgb(218,36,50)" fg:x="591775310" fg:w="2006018"/><text x="89.3739%" y="351.50"></text></g><g><title>core::intrinsics::copy (1,003,009 samples, 0.15%)</title><rect x="89.4260%" y="325" width="0.1511%" height="15" fill="rgb(226,80,48)" fg:x="593781328" fg:w="1003009"/><text x="89.6760%" y="335.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort13_optimal (3,009,027 samples, 0.45%)</title><rect x="89.4260%" y="357" width="0.4532%" height="15" fill="rgb(238,224,15)" fg:x="593781328" fg:w="3009027"/><text x="89.6760%" y="367.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (3,009,027 samples, 0.45%)</title><rect x="89.4260%" y="341" width="0.4532%" height="15" fill="rgb(241,136,10)" fg:x="593781328" fg:w="3009027"/><text x="89.6760%" y="351.50"></text></g><g><title>core::ptr::read (2,006,018 samples, 0.30%)</title><rect x="89.5770%" y="325" width="0.3021%" height="15" fill="rgb(208,32,45)" fg:x="594784337" fg:w="2006018"/><text x="89.8270%" y="335.50"></text></g><g><title>core::intrinsics::copy (2,006,018 samples, 0.30%)</title><rect x="89.8792%" y="325" width="0.3021%" height="15" fill="rgb(207,135,9)" fg:x="596790355" fg:w="2006018"/><text x="90.1292%" y="335.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (13,039,117 samples, 1.96%)</title><rect x="88.3686%" y="373" width="1.9637%" height="15" fill="rgb(206,86,44)" fg:x="586760265" fg:w="13039117"/><text x="88.6186%" y="383.50">c..</text></g><g><title>core::slice::sort::shared::smallsort::sort9_optimal (3,009,027 samples, 0.45%)</title><rect x="89.8792%" y="357" width="0.4532%" height="15" fill="rgb(245,177,15)" fg:x="596790355" fg:w="3009027"/><text x="90.1292%" y="367.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (3,009,027 samples, 0.45%)</title><rect x="89.8792%" y="341" width="0.4532%" height="15" fill="rgb(206,64,50)" fg:x="596790355" fg:w="3009027"/><text x="90.1292%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,003,009 samples, 0.15%)</title><rect x="90.1813%" y="325" width="0.1511%" height="15" fill="rgb(234,36,40)" fg:x="598796373" fg:w="1003009"/><text x="90.4313%" y="335.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::swap (1,003,009 samples, 0.15%)</title><rect x="90.3323%" y="357" width="0.1511%" height="15" fill="rgb(213,64,8)" fg:x="599799382" fg:w="1003009"/><text x="90.5823%" y="367.50"></text></g><g><title>core::ptr::swap (1,003,009 samples, 0.15%)</title><rect x="90.3323%" y="341" width="0.1511%" height="15" fill="rgb(210,75,36)" fg:x="599799382" fg:w="1003009"/><text x="90.5823%" y="351.50"></text></g><g><title>core::intrinsics::copy (1,003,009 samples, 0.15%)</title><rect x="90.3323%" y="325" width="0.1511%" height="15" fill="rgb(229,88,21)" fg:x="599799382" fg:w="1003009"/><text x="90.5823%" y="335.50"></text></g><g><title>core::ptr::read (1,003,009 samples, 0.15%)</title><rect x="90.6344%" y="341" width="0.1511%" height="15" fill="rgb(252,204,47)" fg:x="601805400" fg:w="1003009"/><text x="90.8844%" y="351.50"></text></g><g><title>core::intrinsics::copy (3,009,027 samples, 0.45%)</title><rect x="90.9366%" y="325" width="0.4532%" height="15" fill="rgb(208,77,27)" fg:x="603811418" fg:w="3009027"/><text x="91.1866%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2,006,018 samples, 0.30%)</title><rect x="91.3897%" y="325" width="0.3021%" height="15" fill="rgb(221,76,26)" fg:x="606820445" fg:w="2006018"/><text x="91.6397%" y="335.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (10,030,090 samples, 1.51%)</title><rect x="90.3323%" y="373" width="1.5106%" height="15" fill="rgb(225,139,18)" fg:x="599799382" fg:w="10030090"/><text x="90.5823%" y="383.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (9,027,081 samples, 1.36%)</title><rect x="90.4834%" y="357" width="1.3595%" height="15" fill="rgb(230,137,11)" fg:x="600802391" fg:w="9027081"/><text x="90.7334%" y="367.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::{{closure}} (7,021,063 samples, 1.06%)</title><rect x="90.7855%" y="341" width="1.0574%" height="15" fill="rgb(212,28,1)" fg:x="602808409" fg:w="7021063"/><text x="91.0355%" y="351.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1,003,009 samples, 0.15%)</title><rect x="91.6918%" y="325" width="0.1511%" height="15" fill="rgb(248,164,17)" fg:x="608826463" fg:w="1003009"/><text x="91.9418%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::lt (1,003,009 samples, 0.15%)</title><rect x="91.6918%" y="309" width="0.1511%" height="15" fill="rgb(222,171,42)" fg:x="608826463" fg:w="1003009"/><text x="91.9418%" y="319.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1,003,009 samples, 0.15%)</title><rect x="91.8429%" y="357" width="0.1511%" height="15" fill="rgb(243,84,45)" fg:x="609829472" fg:w="1003009"/><text x="92.0929%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::lt (1,003,009 samples, 0.15%)</title><rect x="91.8429%" y="341" width="0.1511%" height="15" fill="rgb(252,49,23)" fg:x="609829472" fg:w="1003009"/><text x="92.0929%" y="351.50"></text></g><g><title>core::slice::sort::shared::pivot::choose_pivot (1,003,009 samples, 0.15%)</title><rect x="91.9940%" y="357" width="0.1511%" height="15" fill="rgb(215,19,7)" fg:x="610832481" fg:w="1003009"/><text x="92.2440%" y="367.50"></text></g><g><title>core::slice::sort::shared::pivot::median3_rec (1,003,009 samples, 0.15%)</title><rect x="91.9940%" y="341" width="0.1511%" height="15" fill="rgb(238,81,41)" fg:x="610832481" fg:w="1003009"/><text x="92.2440%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,003,009 samples, 0.15%)</title><rect x="92.1450%" y="341" width="0.1511%" height="15" fill="rgb(210,199,37)" fg:x="611835490" fg:w="1003009"/><text x="92.3950%" y="351.50"></text></g><g><title>[libc.so.6] (1,003,009 samples, 0.15%)</title><rect x="92.1450%" y="325" width="0.1511%" height="15" fill="rgb(244,192,49)" fg:x="611835490" fg:w="1003009"/><text x="92.3950%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,003,009 samples, 0.15%)</title><rect x="92.2961%" y="325" width="0.1511%" height="15" fill="rgb(226,211,11)" fg:x="612838499" fg:w="1003009"/><text x="92.5461%" y="335.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_down (1,003,009 samples, 0.15%)</title><rect x="92.4471%" y="325" width="0.1511%" height="15" fill="rgb(236,162,54)" fg:x="613841508" fg:w="1003009"/><text x="92.6971%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,003,009 samples, 0.15%)</title><rect x="92.4471%" y="309" width="0.1511%" height="15" fill="rgb(220,229,9)" fg:x="613841508" fg:w="1003009"/><text x="92.6971%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,003,009 samples, 0.15%)</title><rect x="92.5982%" y="309" width="0.1511%" height="15" fill="rgb(250,87,22)" fg:x="614844517" fg:w="1003009"/><text x="92.8482%" y="319.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1,003,009 samples, 0.15%)</title><rect x="92.7492%" y="309" width="0.1511%" height="15" fill="rgb(239,43,17)" fg:x="615847526" fg:w="1003009"/><text x="92.9992%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::lt (1,003,009 samples, 0.15%)</title><rect x="92.7492%" y="293" width="0.1511%" height="15" fill="rgb(231,177,25)" fg:x="615847526" fg:w="1003009"/><text x="92.9992%" y="303.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (6,018,054 samples, 0.91%)</title><rect x="92.1450%" y="357" width="0.9063%" height="15" fill="rgb(219,179,1)" fg:x="611835490" fg:w="6018054"/><text x="92.3950%" y="367.50"></text></g><g><title>core::slice::sort::shared::smallsort::bidirectional_merge (5,015,045 samples, 0.76%)</title><rect x="92.2961%" y="341" width="0.7553%" height="15" fill="rgb(238,219,53)" fg:x="612838499" fg:w="5015045"/><text x="92.5461%" y="351.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_up (3,009,027 samples, 0.45%)</title><rect x="92.5982%" y="325" width="0.4532%" height="15" fill="rgb(232,167,36)" fg:x="614844517" fg:w="3009027"/><text x="92.8482%" y="335.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1,003,009 samples, 0.15%)</title><rect x="92.9003%" y="309" width="0.1511%" height="15" fill="rgb(244,19,51)" fg:x="616850535" fg:w="1003009"/><text x="93.1503%" y="319.50"></text></g><g><title>core::intrinsics::copy (6,018,054 samples, 0.91%)</title><rect x="93.6556%" y="309" width="0.9063%" height="15" fill="rgb(224,6,22)" fg:x="621865580" fg:w="6018054"/><text x="93.9056%" y="319.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (11,033,099 samples, 1.66%)</title><rect x="93.0514%" y="357" width="1.6616%" height="15" fill="rgb(224,145,5)" fg:x="617853544" fg:w="11033099"/><text x="93.3014%" y="367.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (11,033,099 samples, 1.66%)</title><rect x="93.0514%" y="341" width="1.6616%" height="15" fill="rgb(234,130,49)" fg:x="617853544" fg:w="11033099"/><text x="93.3014%" y="351.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::{{closure}} (8,024,072 samples, 1.21%)</title><rect x="93.5045%" y="325" width="1.2085%" height="15" fill="rgb(254,6,2)" fg:x="620862571" fg:w="8024072"/><text x="93.7545%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,003,009 samples, 0.15%)</title><rect x="94.5619%" y="309" width="0.1511%" height="15" fill="rgb(208,96,46)" fg:x="627883634" fg:w="1003009"/><text x="94.8119%" y="319.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1,003,009 samples, 0.15%)</title><rect x="94.7130%" y="341" width="0.1511%" height="15" fill="rgb(239,3,39)" fg:x="628886643" fg:w="1003009"/><text x="94.9630%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::lt (1,003,009 samples, 0.15%)</title><rect x="94.7130%" y="325" width="0.1511%" height="15" fill="rgb(233,210,1)" fg:x="628886643" fg:w="1003009"/><text x="94.9630%" y="335.50"></text></g><g><title>core::slice::sort::shared::pivot::median3 (1,003,009 samples, 0.15%)</title><rect x="94.8640%" y="309" width="0.1511%" height="15" fill="rgb(244,137,37)" fg:x="629889652" fg:w="1003009"/><text x="95.1140%" y="319.50"></text></g><g><title>core::slice::sort::shared::pivot::choose_pivot (2,006,018 samples, 0.30%)</title><rect x="94.8640%" y="341" width="0.3021%" height="15" fill="rgb(240,136,2)" fg:x="629889652" fg:w="2006018"/><text x="95.1140%" y="351.50"></text></g><g><title>core::slice::sort::shared::pivot::median3_rec (2,006,018 samples, 0.30%)</title><rect x="94.8640%" y="325" width="0.3021%" height="15" fill="rgb(239,18,37)" fg:x="629889652" fg:w="2006018"/><text x="95.1140%" y="335.50"></text></g><g><title>core::slice::sort::shared::pivot::median3_rec (1,003,009 samples, 0.15%)</title><rect x="95.0151%" y="309" width="0.1511%" height="15" fill="rgb(218,185,22)" fg:x="630892661" fg:w="1003009"/><text x="95.2651%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,003,009 samples, 0.15%)</title><rect x="95.3172%" y="325" width="0.1511%" height="15" fill="rgb(225,218,4)" fg:x="632898679" fg:w="1003009"/><text x="95.5672%" y="335.50"></text></g><g><title>[libc.so.6] (1,003,009 samples, 0.15%)</title><rect x="95.3172%" y="309" width="0.1511%" height="15" fill="rgb(230,182,32)" fg:x="632898679" fg:w="1003009"/><text x="95.5672%" y="319.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1,003,009 samples, 0.15%)</title><rect x="95.6193%" y="309" width="0.1511%" height="15" fill="rgb(242,56,43)" fg:x="634904697" fg:w="1003009"/><text x="95.8693%" y="319.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_down (3,009,027 samples, 0.45%)</title><rect x="95.7704%" y="309" width="0.4532%" height="15" fill="rgb(233,99,24)" fg:x="635907706" fg:w="3009027"/><text x="96.0204%" y="319.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::wrapping_sub (3,009,027 samples, 0.45%)</title><rect x="95.7704%" y="293" width="0.4532%" height="15" fill="rgb(234,209,42)" fg:x="635907706" fg:w="3009027"/><text x="96.0204%" y="303.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::wrapping_offset (3,009,027 samples, 0.45%)</title><rect x="95.7704%" y="277" width="0.4532%" height="15" fill="rgb(227,7,12)" fg:x="635907706" fg:w="3009027"/><text x="96.0204%" y="287.50"></text></g><g><title>core::slice::sort::shared::smallsort::bidirectional_merge (7,021,063 samples, 1.06%)</title><rect x="95.4683%" y="325" width="1.0574%" height="15" fill="rgb(245,203,43)" fg:x="633901688" fg:w="7021063"/><text x="95.7183%" y="335.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_up (2,006,018 samples, 0.30%)</title><rect x="96.2236%" y="309" width="0.3021%" height="15" fill="rgb(238,205,33)" fg:x="638916733" fg:w="2006018"/><text x="96.4736%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2,006,018 samples, 0.30%)</title><rect x="96.2236%" y="293" width="0.3021%" height="15" fill="rgb(231,56,7)" fg:x="638916733" fg:w="2006018"/><text x="96.4736%" y="303.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort13_optimal (3,009,027 samples, 0.45%)</title><rect x="96.5257%" y="325" width="0.4532%" height="15" fill="rgb(244,186,29)" fg:x="640922751" fg:w="3009027"/><text x="96.7757%" y="335.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (3,009,027 samples, 0.45%)</title><rect x="96.5257%" y="309" width="0.4532%" height="15" fill="rgb(234,111,31)" fg:x="640922751" fg:w="3009027"/><text x="96.7757%" y="319.50"></text></g><g><title>core::ptr::read (3,009,027 samples, 0.45%)</title><rect x="96.5257%" y="293" width="0.4532%" height="15" fill="rgb(241,149,10)" fg:x="640922751" fg:w="3009027"/><text x="96.7757%" y="303.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (13,039,117 samples, 1.96%)</title><rect x="95.1662%" y="341" width="1.9637%" height="15" fill="rgb(249,206,44)" fg:x="631895670" fg:w="13039117"/><text x="95.4162%" y="351.50">c..</text></g><g><title>core::slice::sort::shared::smallsort::sort9_optimal (1,003,009 samples, 0.15%)</title><rect x="96.9789%" y="325" width="0.1511%" height="15" fill="rgb(251,153,30)" fg:x="643931778" fg:w="1003009"/><text x="97.2289%" y="335.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (1,003,009 samples, 0.15%)</title><rect x="96.9789%" y="309" width="0.1511%" height="15" fill="rgb(239,152,38)" fg:x="643931778" fg:w="1003009"/><text x="97.2289%" y="319.50"></text></g><g><title>core::intrinsics::copy (1,003,009 samples, 0.15%)</title><rect x="96.9789%" y="293" width="0.1511%" height="15" fill="rgb(249,139,47)" fg:x="643931778" fg:w="1003009"/><text x="97.2289%" y="303.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (6,018,054 samples, 0.91%)</title><rect x="97.1299%" y="341" width="0.9063%" height="15" fill="rgb(244,64,35)" fg:x="644934787" fg:w="6018054"/><text x="97.3799%" y="351.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (6,018,054 samples, 0.91%)</title><rect x="97.1299%" y="325" width="0.9063%" height="15" fill="rgb(216,46,15)" fg:x="644934787" fg:w="6018054"/><text x="97.3799%" y="335.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::{{closure}} (2,006,018 samples, 0.30%)</title><rect x="97.7341%" y="309" width="0.3021%" height="15" fill="rgb(250,74,19)" fg:x="648946823" fg:w="2006018"/><text x="97.9841%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,003,009 samples, 0.15%)</title><rect x="97.8852%" y="293" width="0.1511%" height="15" fill="rgb(249,42,33)" fg:x="649949832" fg:w="1003009"/><text x="98.1352%" y="303.50"></text></g><g><title>core::slice::sort::shared::smallsort::insertion_sort_shift_left (1,003,009 samples, 0.15%)</title><rect x="98.0363%" y="309" width="0.1511%" height="15" fill="rgb(242,149,17)" fg:x="650952841" fg:w="1003009"/><text x="98.2863%" y="319.50"></text></g><g><title>core::slice::sort::shared::smallsort::insert_tail (1,003,009 samples, 0.15%)</title><rect x="98.0363%" y="293" width="0.1511%" height="15" fill="rgb(244,29,21)" fg:x="650952841" fg:w="1003009"/><text x="98.2863%" y="303.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1,003,009 samples, 0.15%)</title><rect x="98.0363%" y="277" width="0.1511%" height="15" fill="rgb(220,130,37)" fg:x="650952841" fg:w="1003009"/><text x="98.2863%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::lt (1,003,009 samples, 0.15%)</title><rect x="98.0363%" y="261" width="0.1511%" height="15" fill="rgb(211,67,2)" fg:x="650952841" fg:w="1003009"/><text x="98.2863%" y="271.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort13_optimal (1,003,009 samples, 0.15%)</title><rect x="98.1873%" y="309" width="0.1511%" height="15" fill="rgb(235,68,52)" fg:x="651955850" fg:w="1003009"/><text x="98.4373%" y="319.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (1,003,009 samples, 0.15%)</title><rect x="98.1873%" y="293" width="0.1511%" height="15" fill="rgb(246,142,3)" fg:x="651955850" fg:w="1003009"/><text x="98.4373%" y="303.50"></text></g><g><title>core::ptr::read (1,003,009 samples, 0.15%)</title><rect x="98.1873%" y="277" width="0.1511%" height="15" fill="rgb(241,25,7)" fg:x="651955850" fg:w="1003009"/><text x="98.4373%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2,006,018 samples, 0.30%)</title><rect x="98.3384%" y="277" width="0.3021%" height="15" fill="rgb(242,119,39)" fg:x="652958859" fg:w="2006018"/><text x="98.5884%" y="287.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (6,018,054 samples, 0.91%)</title><rect x="98.0363%" y="325" width="0.9063%" height="15" fill="rgb(241,98,45)" fg:x="650952841" fg:w="6018054"/><text x="98.2863%" y="335.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort9_optimal (4,012,036 samples, 0.60%)</title><rect x="98.3384%" y="309" width="0.6042%" height="15" fill="rgb(254,28,30)" fg:x="652958859" fg:w="4012036"/><text x="98.5884%" y="319.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (4,012,036 samples, 0.60%)</title><rect x="98.3384%" y="293" width="0.6042%" height="15" fill="rgb(241,142,54)" fg:x="652958859" fg:w="4012036"/><text x="98.5884%" y="303.50"></text></g><g><title>core::ptr::read (2,006,018 samples, 0.30%)</title><rect x="98.6405%" y="277" width="0.3021%" height="15" fill="rgb(222,85,15)" fg:x="654964877" fg:w="2006018"/><text x="98.8905%" y="287.50"></text></g><g><title>core::ptr::read (1,003,009 samples, 0.15%)</title><rect x="99.0937%" y="293" width="0.1511%" height="15" fill="rgb(210,85,47)" fg:x="657973904" fg:w="1003009"/><text x="99.3437%" y="303.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (3,009,027 samples, 0.45%)</title><rect x="98.9426%" y="325" width="0.4532%" height="15" fill="rgb(224,206,25)" fg:x="656970895" fg:w="3009027"/><text x="99.1926%" y="335.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (3,009,027 samples, 0.45%)</title><rect x="98.9426%" y="309" width="0.4532%" height="15" fill="rgb(243,201,19)" fg:x="656970895" fg:w="3009027"/><text x="99.1926%" y="319.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::{{closure}} (1,003,009 samples, 0.15%)</title><rect x="99.2447%" y="293" width="0.1511%" height="15" fill="rgb(236,59,4)" fg:x="658976913" fg:w="1003009"/><text x="99.4947%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,003,009 samples, 0.15%)</title><rect x="99.2447%" y="277" width="0.1511%" height="15" fill="rgb(254,179,45)" fg:x="658976913" fg:w="1003009"/><text x="99.4947%" y="287.50"></text></g><g><title>core::slice::sort::shared::smallsort::bidirectional_merge (1,003,009 samples, 0.15%)</title><rect x="99.3958%" y="293" width="0.1511%" height="15" fill="rgb(226,14,10)" fg:x="659979922" fg:w="1003009"/><text x="99.6458%" y="303.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_down (1,003,009 samples, 0.15%)</title><rect x="99.3958%" y="277" width="0.1511%" height="15" fill="rgb(244,27,41)" fg:x="659979922" fg:w="1003009"/><text x="99.6458%" y="287.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::wrapping_sub (1,003,009 samples, 0.15%)</title><rect x="99.3958%" y="261" width="0.1511%" height="15" fill="rgb(235,35,32)" fg:x="659979922" fg:w="1003009"/><text x="99.6458%" y="271.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::wrapping_offset (1,003,009 samples, 0.15%)</title><rect x="99.3958%" y="245" width="0.1511%" height="15" fill="rgb(218,68,31)" fg:x="659979922" fg:w="1003009"/><text x="99.6458%" y="255.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort13_optimal (1,003,009 samples, 0.15%)</title><rect x="99.5468%" y="293" width="0.1511%" height="15" fill="rgb(207,120,37)" fg:x="660982931" fg:w="1003009"/><text x="99.7968%" y="303.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (1,003,009 samples, 0.15%)</title><rect x="99.5468%" y="277" width="0.1511%" height="15" fill="rgb(227,98,0)" fg:x="660982931" fg:w="1003009"/><text x="99.7968%" y="287.50"></text></g><g><title>core::ptr::read (1,003,009 samples, 0.15%)</title><rect x="99.5468%" y="261" width="0.1511%" height="15" fill="rgb(207,7,3)" fg:x="660982931" fg:w="1003009"/><text x="99.7968%" y="271.50"></text></g><g><title>aoc24::days::day1::day_1_work_opt (199,598,791 samples, 30.06%)</title><rect x="69.7885%" y="453" width="30.0604%" height="15" fill="rgb(206,98,19)" fg:x="463390158" fg:w="199598791"/><text x="70.0385%" y="463.50">aoc24::days::day1::day_1_work_opt</text></g><g><title>core::slice::&lt;impl [T]&gt;::sort_unstable (102,306,918 samples, 15.41%)</title><rect x="84.4411%" y="437" width="15.4079%" height="15" fill="rgb(217,5,26)" fg:x="560682031" fg:w="102306918"/><text x="84.6911%" y="447.50">core::slice::&lt;impl [T]&gt;:..</text></g><g><title>core::slice::sort::unstable::sort (102,306,918 samples, 15.41%)</title><rect x="84.4411%" y="421" width="15.4079%" height="15" fill="rgb(235,190,38)" fg:x="560682031" fg:w="102306918"/><text x="84.6911%" y="431.50">core::slice::sort::unsta..</text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (101,303,909 samples, 15.26%)</title><rect x="84.5921%" y="405" width="15.2568%" height="15" fill="rgb(247,86,24)" fg:x="561685040" fg:w="101303909"/><text x="84.8421%" y="415.50">core::slice::sort::unst..</text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (80,240,720 samples, 12.08%)</title><rect x="87.7644%" y="389" width="12.0846%" height="15" fill="rgb(205,101,16)" fg:x="582748229" fg:w="80240720"/><text x="88.0144%" y="399.50">core::slice::sort:..</text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (53,159,477 samples, 8.01%)</title><rect x="91.8429%" y="373" width="8.0060%" height="15" fill="rgb(246,168,33)" fg:x="609829472" fg:w="53159477"/><text x="92.0929%" y="383.50">core::slice..</text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (34,102,306 samples, 5.14%)</title><rect x="94.7130%" y="357" width="5.1360%" height="15" fill="rgb(231,114,1)" fg:x="628886643" fg:w="34102306"/><text x="94.9630%" y="367.50">core::..</text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (12,036,108 samples, 1.81%)</title><rect x="98.0363%" y="341" width="1.8127%" height="15" fill="rgb(207,184,53)" fg:x="650952841" fg:w="12036108"/><text x="98.2863%" y="351.50">c..</text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (3,009,027 samples, 0.45%)</title><rect x="99.3958%" y="325" width="0.4532%" height="15" fill="rgb(224,95,51)" fg:x="659979922" fg:w="3009027"/><text x="99.6458%" y="335.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (3,009,027 samples, 0.45%)</title><rect x="99.3958%" y="309" width="0.4532%" height="15" fill="rgb(212,188,45)" fg:x="659979922" fg:w="3009027"/><text x="99.6458%" y="319.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort9_optimal (1,003,009 samples, 0.15%)</title><rect x="99.6979%" y="293" width="0.1511%" height="15" fill="rgb(223,154,38)" fg:x="661985940" fg:w="1003009"/><text x="99.9479%" y="303.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (1,003,009 samples, 0.15%)</title><rect x="99.6979%" y="277" width="0.1511%" height="15" fill="rgb(251,22,52)" fg:x="661985940" fg:w="1003009"/><text x="99.9479%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,003,009 samples, 0.15%)</title><rect x="99.6979%" y="261" width="0.1511%" height="15" fill="rgb(229,209,22)" fg:x="661985940" fg:w="1003009"/><text x="99.9479%" y="271.50"></text></g><g><title>all (663,991,958 samples, 100%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(234,138,34)" fg:x="0" fg:w="663991958"/><text x="0.2500%" y="783.50"></text></g><g><title>aoc24 (663,991,958 samples, 100.00%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(212,95,11)" fg:x="0" fg:w="663991958"/><text x="0.2500%" y="767.50">aoc24</text></g><g><title>_start (663,991,958 samples, 100.00%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(240,179,47)" fg:x="0" fg:w="663991958"/><text x="0.2500%" y="751.50">_start</text></g><g><title>__libc_start_main (663,991,958 samples, 100.00%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(240,163,11)" fg:x="0" fg:w="663991958"/><text x="0.2500%" y="735.50">__libc_start_main</text></g><g><title>[libc.so.6] (663,991,958 samples, 100.00%)</title><rect x="0.0000%" y="709" width="100.0000%" height="15" fill="rgb(236,37,12)" fg:x="0" fg:w="663991958"/><text x="0.2500%" y="719.50">[libc.so.6]</text></g><g><title>main (663,991,958 samples, 100.00%)</title><rect x="0.0000%" y="693" width="100.0000%" height="15" fill="rgb(232,164,16)" fg:x="0" fg:w="663991958"/><text x="0.2500%" y="703.50">main</text></g><g><title>std::rt::lang_start_internal (663,991,958 samples, 100.00%)</title><rect x="0.0000%" y="677" width="100.0000%" height="15" fill="rgb(244,205,15)" fg:x="0" fg:w="663991958"/><text x="0.2500%" y="687.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (663,991,958 samples, 100.00%)</title><rect x="0.0000%" y="661" width="100.0000%" height="15" fill="rgb(223,117,47)" fg:x="0" fg:w="663991958"/><text x="0.2500%" y="671.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (663,991,958 samples, 100.00%)</title><rect x="0.0000%" y="645" width="100.0000%" height="15" fill="rgb(244,107,35)" fg:x="0" fg:w="663991958"/><text x="0.2500%" y="655.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (663,991,958 samples, 100.00%)</title><rect x="0.0000%" y="629" width="100.0000%" height="15" fill="rgb(205,140,8)" fg:x="0" fg:w="663991958"/><text x="0.2500%" y="639.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (663,991,958 samples, 100.00%)</title><rect x="0.0000%" y="613" width="100.0000%" height="15" fill="rgb(228,84,46)" fg:x="0" fg:w="663991958"/><text x="0.2500%" y="623.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (663,991,958 samples, 100.00%)</title><rect x="0.0000%" y="597" width="100.0000%" height="15" fill="rgb(254,188,9)" fg:x="0" fg:w="663991958"/><text x="0.2500%" y="607.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (663,991,958 samples, 100.00%)</title><rect x="0.0000%" y="581" width="100.0000%" height="15" fill="rgb(206,112,54)" fg:x="0" fg:w="663991958"/><text x="0.2500%" y="591.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (663,991,958 samples, 100.00%)</title><rect x="0.0000%" y="565" width="100.0000%" height="15" fill="rgb(216,84,49)" fg:x="0" fg:w="663991958"/><text x="0.2500%" y="575.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (663,991,958 samples, 100.00%)</title><rect x="0.0000%" y="549" width="100.0000%" height="15" fill="rgb(214,194,35)" fg:x="0" fg:w="663991958"/><text x="0.2500%" y="559.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (663,991,958 samples, 100.00%)</title><rect x="0.0000%" y="533" width="100.0000%" height="15" fill="rgb(249,28,3)" fg:x="0" fg:w="663991958"/><text x="0.2500%" y="543.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (663,991,958 samples, 100.00%)</title><rect x="0.0000%" y="517" width="100.0000%" height="15" fill="rgb(222,56,52)" fg:x="0" fg:w="663991958"/><text x="0.2500%" y="527.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (663,991,958 samples, 100.00%)</title><rect x="0.0000%" y="501" width="100.0000%" height="15" fill="rgb(245,217,50)" fg:x="0" fg:w="663991958"/><text x="0.2500%" y="511.50">core::ops::function::FnOnce::call_once</text></g><g><title>aoc24::main (663,991,958 samples, 100.00%)</title><rect x="0.0000%" y="485" width="100.0000%" height="15" fill="rgb(213,201,24)" fg:x="0" fg:w="663991958"/><text x="0.2500%" y="495.50">aoc24::main</text></g><g><title>aoc24::days::day1::day_1_opt (200,601,800 samples, 30.21%)</title><rect x="69.7885%" y="469" width="30.2115%" height="15" fill="rgb(248,116,28)" fg:x="463390158" fg:w="200601800"/><text x="70.0385%" y="479.50">aoc24::days::day1::day_1_opt</text></g><g><title>aoc24::days::file_loader::load_day (1,003,009 samples, 0.15%)</title><rect x="99.8489%" y="453" width="0.1511%" height="15" fill="rgb(219,72,43)" fg:x="662988949" fg:w="1003009"/><text x="100.0989%" y="463.50"></text></g><g><title>std::fs::read_to_string (1,003,009 samples, 0.15%)</title><rect x="99.8489%" y="437" width="0.1511%" height="15" fill="rgb(209,138,14)" fg:x="662988949" fg:w="1003009"/><text x="100.0989%" y="447.50"></text></g><g><title>std::fs::read_to_string::inner (1,003,009 samples, 0.15%)</title><rect x="99.8489%" y="421" width="0.1511%" height="15" fill="rgb(222,18,33)" fg:x="662988949" fg:w="1003009"/><text x="100.0989%" y="431.50"></text></g><g><title>std::fs::File::metadata (1,003,009 samples, 0.15%)</title><rect x="99.8489%" y="405" width="0.1511%" height="15" fill="rgb(213,199,7)" fg:x="662988949" fg:w="1003009"/><text x="100.0989%" y="415.50"></text></g><g><title>std::sys::pal::unix::fs::File::file_attr (1,003,009 samples, 0.15%)</title><rect x="99.8489%" y="389" width="0.1511%" height="15" fill="rgb(250,110,10)" fg:x="662988949" fg:w="1003009"/><text x="100.0989%" y="399.50"></text></g><g><title>std::sys::pal::unix::fs::try_statx (1,003,009 samples, 0.15%)</title><rect x="99.8489%" y="373" width="0.1511%" height="15" fill="rgb(248,123,6)" fg:x="662988949" fg:w="1003009"/><text x="100.0989%" y="383.50"></text></g><g><title>std::sys::pal::unix::fs::try_statx::statx (1,003,009 samples, 0.15%)</title><rect x="99.8489%" y="357" width="0.1511%" height="15" fill="rgb(206,91,31)" fg:x="662988949" fg:w="1003009"/><text x="100.0989%" y="367.50"></text></g><g><title>statx (1,003,009 samples, 0.15%)</title><rect x="99.8489%" y="341" width="0.1511%" height="15" fill="rgb(211,154,13)" fg:x="662988949" fg:w="1003009"/><text x="100.0989%" y="351.50"></text></g></svg></svg>